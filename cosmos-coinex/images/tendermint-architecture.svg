<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="671px" preserveAspectRatio="none" style="width:1310px;height:671px;" version="1.1" viewBox="0 0 1310 671" width="1310px" zoomAndPan="magnify"><defs><filter height="300%" id="fa5c0nskcm8zr" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[57060994c107fb965801a5c218b12e41]
cluster evidence--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="22,392,90,392,97,414.4883,130,414.4883,130,659,22,659,22,392" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="97" y1="414.4883" y2="414.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="62" x="26" y="407.5352">evidence</text><!--MD5=[fa03aa15696d8de1fc436cb9f6abb39b]
cluster p2p--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="322,116,355,116,362,138.4883,722,138.4883,722,567,322,567,322,116" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="322" x2="362" y1="138.4883" y2="138.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="27" x="326" y="131.5352">p2p</text><!--MD5=[6ff94cd2fd350ff2b867955d3269a227]
cluster mempool--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="154,392,228,392,235,414.4883,298,414.4883,298,659,154,659,154,392" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="235" y1="414.4883" y2="414.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="158" y="407.5352">mempool</text><!--MD5=[3bde983dd405bd6d1b3da471b606eade]
cluster consensus--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="867,300,948,300,955,322.4883,1015,322.4883,1015,659,867,659,867,300" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="867" x2="955" y1="322.4883" y2="322.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="75" x="871" y="315.5352">consensus</text><!--MD5=[7579d5565d2521d5936cec86ed3dadee]
cluster service--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="875,24,931,24,938,46.4883,1007,46.4883,1007,199,875,199,875,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="875" x2="938" y1="46.4883" y2="46.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="879" y="39.5352">service</text><!--MD5=[0db76f708cbe7270eddf2974bb114691]
cluster pex--><polygon fill="#FFFFFF" filter="url(#fa5c0nskcm8zr)" points="1160,392,1191,392,1198,414.4883,1282,414.4883,1282,659,1160,659,1160,392" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1160" x2="1198" y1="414.4883" y2="414.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="1164" y="407.5352">pex</text><!--MD5=[324c2a1af344348a0a36e8d180b695fc]
class evidence.Pool--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="evidence.Pool" style="stroke: #A80036; stroke-width: 1.5;" width="56" x="48" y="519"/><ellipse cx="63" cy="535" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M62.2334,536.063 Q60.3823,535.3574 59.7266,534.5813 Q59.0708,533.8052 59.0708,532.4937 Q59.0708,530.8086 60.1499,529.8457 Q61.229,528.8828 63.1133,528.8828 Q63.9683,528.8828 64.8232,529.0779 Q65.6782,529.2729 66.5166,529.6548 L66.5166,532.0454 Q65.728,531.4893 64.9146,531.1987 Q64.1011,530.9082 63.3042,530.9082 Q62.416,530.9082 61.9429,531.2651 Q61.4697,531.6221 61.4697,532.2861 Q61.4697,532.8008 61.8142,533.137 Q62.1587,533.4731 63.2544,533.8799 L64.3086,534.2783 Q65.8027,534.8262 66.5083,535.731 Q67.2139,536.6357 67.2139,538.0137 Q67.2139,539.8896 66.1057,540.8152 Q64.9976,541.7407 62.7563,541.7407 Q61.835,541.7407 60.9094,541.5208 Q59.9839,541.3008 59.1206,540.8691 L59.1206,538.3374 Q60.1001,539.0347 61.0173,539.375 Q61.9346,539.7153 62.8311,539.7153 Q63.7358,539.7153 64.2339,539.3044 Q64.7319,538.8936 64.7319,538.1548 Q64.7319,537.5986 64.3999,537.1794 Q64.0679,536.7603 63.437,536.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="24" x="77" y="539.5352">Pool</text><!--MD5=[0b6f60b296f79805b593c05f25025429]
class evidence.Reactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="evidence.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="38" y="611"/><ellipse cx="53" cy="627" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M52.2334,628.063 Q50.3823,627.3574 49.7266,626.5813 Q49.0708,625.8052 49.0708,624.4937 Q49.0708,622.8086 50.1499,621.8457 Q51.229,620.8828 53.1133,620.8828 Q53.9683,620.8828 54.8232,621.0779 Q55.6782,621.2729 56.5166,621.6548 L56.5166,624.0454 Q55.728,623.4893 54.9146,623.1987 Q54.1011,622.9082 53.3042,622.9082 Q52.416,622.9082 51.9429,623.2651 Q51.4697,623.6221 51.4697,624.2861 Q51.4697,624.8008 51.8142,625.137 Q52.1587,625.4731 53.2544,625.8799 L54.3086,626.2783 Q55.8027,626.8262 56.5083,627.731 Q57.2139,628.6357 57.2139,630.0137 Q57.2139,631.8896 56.1057,632.8152 Q54.9976,633.7407 52.7563,633.7407 Q51.835,633.7407 50.9094,633.5208 Q49.9839,633.3008 49.1206,632.8691 L49.1206,630.3374 Q50.1001,631.0347 51.0173,631.375 Q51.9346,631.7153 52.8311,631.7153 Q53.7358,631.7153 54.2339,631.3044 Q54.7319,630.8936 54.7319,630.1548 Q54.7319,629.5986 54.3999,629.1794 Q54.0679,628.7603 53.437,628.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="67" y="631.5352">Reactor</text><!--MD5=[3cf3bf47bb1cece4e9f32b20193c2c79]
class evidence.Store--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="evidence.Store" style="stroke: #A80036; stroke-width: 1.5;" width="61" x="45.5" y="427"/><ellipse cx="60.5" cy="443" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M59.7334,444.063 Q57.8823,443.3574 57.2266,442.5813 Q56.5708,441.8052 56.5708,440.4937 Q56.5708,438.8086 57.6499,437.8457 Q58.729,436.8828 60.6133,436.8828 Q61.4683,436.8828 62.3232,437.0779 Q63.1782,437.2729 64.0166,437.6548 L64.0166,440.0454 Q63.228,439.4893 62.4146,439.1987 Q61.6011,438.9082 60.8042,438.9082 Q59.916,438.9082 59.4429,439.2651 Q58.9697,439.6221 58.9697,440.2861 Q58.9697,440.8008 59.3142,441.137 Q59.6587,441.4731 60.7544,441.8799 L61.8086,442.2783 Q63.3027,442.8262 64.0083,443.731 Q64.7139,444.6357 64.7139,446.0137 Q64.7139,447.8896 63.6057,448.8152 Q62.4976,449.7407 60.2563,449.7407 Q59.335,449.7407 58.4094,449.5208 Q57.4839,449.3008 56.6206,448.8691 L56.6206,446.3374 Q57.6001,447.0347 58.5173,447.375 Q59.4346,447.7153 60.3311,447.7153 Q61.2358,447.7153 61.7339,447.3044 Q62.2319,446.8936 62.2319,446.1548 Q62.2319,445.5986 61.8999,445.1794 Q61.5679,444.7603 60.937,444.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="74.5" y="447.5352">Store</text><!--MD5=[311699931f27d41b8a110d6bfb3b1517]
class p2p.BaseReactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.5;" width="103" x="602.5" y="519"/><ellipse cx="617.5" cy="535" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M616.7334,536.063 Q614.8823,535.3574 614.2266,534.5813 Q613.5708,533.8052 613.5708,532.4937 Q613.5708,530.8086 614.6499,529.8457 Q615.729,528.8828 617.6133,528.8828 Q618.4683,528.8828 619.3232,529.0779 Q620.1782,529.2729 621.0166,529.6548 L621.0166,532.0454 Q620.228,531.4893 619.4146,531.1987 Q618.6011,530.9082 617.8042,530.9082 Q616.916,530.9082 616.4429,531.2651 Q615.9697,531.6221 615.9697,532.2861 Q615.9697,532.8008 616.3142,533.137 Q616.6587,533.4731 617.7544,533.8799 L618.8086,534.2783 Q620.3027,534.8262 621.0083,535.731 Q621.7139,536.6357 621.7139,538.0137 Q621.7139,539.8896 620.6057,540.8152 Q619.4976,541.7407 617.2563,541.7407 Q616.335,541.7407 615.4094,541.5208 Q614.4839,541.3008 613.6206,540.8691 L613.6206,538.3374 Q614.6001,539.0347 615.5173,539.375 Q616.4346,539.7153 617.3311,539.7153 Q618.2358,539.7153 618.7339,539.3044 Q619.2319,538.8936 619.2319,538.1548 Q619.2319,537.5986 618.8999,537.1794 Q618.5679,536.7603 617.937,536.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="631.5" y="539.5352">BaseReactor</text><!--MD5=[9fb5b8a8bddc32b7b1ff318042f2b338]
class p2p.IPeerSet--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.IPeerSet" style="stroke: #A80036; stroke-width: 1.5;" width="78" x="628" y="243"/><ellipse cx="643" cy="259" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M639.4277,255.2651 L639.4277,253.1069 L646.8071,253.1069 L646.8071,255.2651 L644.3418,255.2651 L644.3418,263.3418 L646.8071,263.3418 L646.8071,265.5 L639.4277,265.5 L639.4277,263.3418 L641.8931,263.3418 L641.8931,255.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="657" y="263.5352">IPeerSet</text><!--MD5=[53e5f75d9eb4a4b76da8301e97156229]
class p2p.MultiplexTransport--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.5;" width="141" x="451.5" y="427"/><ellipse cx="466.5" cy="443" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M465.7334,444.063 Q463.8823,443.3574 463.2266,442.5813 Q462.5708,441.8052 462.5708,440.4937 Q462.5708,438.8086 463.6499,437.8457 Q464.729,436.8828 466.6133,436.8828 Q467.4683,436.8828 468.3232,437.0779 Q469.1782,437.2729 470.0166,437.6548 L470.0166,440.0454 Q469.228,439.4893 468.4146,439.1987 Q467.6011,438.9082 466.8042,438.9082 Q465.916,438.9082 465.4429,439.2651 Q464.9697,439.6221 464.9697,440.2861 Q464.9697,440.8008 465.3142,441.137 Q465.6587,441.4731 466.7544,441.8799 L467.8086,442.2783 Q469.3027,442.8262 470.0083,443.731 Q470.7139,444.6357 470.7139,446.0137 Q470.7139,447.8896 469.6057,448.8152 Q468.4976,449.7407 466.2563,449.7407 Q465.335,449.7407 464.4094,449.5208 Q463.4839,449.3008 462.6206,448.8691 L462.6206,446.3374 Q463.6001,447.0347 464.5173,447.375 Q465.4346,447.7153 466.3311,447.7153 Q467.2358,447.7153 467.7339,447.3044 Q468.2319,446.8936 468.2319,446.1548 Q468.2319,445.5986 467.8999,445.1794 Q467.5679,444.7603 466.937,444.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="480.5" y="447.5352">MultiplexTransport</text><!--MD5=[e3e52a252a583c20fdaae9f735fd57de]
class p2p.Peer--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.Peer" style="stroke: #A80036; stroke-width: 1.5;" width="58" x="588" y="151"/><ellipse cx="603" cy="167" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M599.4277,163.2651 L599.4277,161.1069 L606.8071,161.1069 L606.8071,163.2651 L604.3418,163.2651 L604.3418,171.3418 L606.8071,171.3418 L606.8071,173.5 L599.4277,173.5 L599.4277,171.3418 L601.8931,171.3418 L601.8931,163.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="26" x="617" y="171.5352">Peer</text><!--MD5=[573edd832eea7a8264afd9f9040bf970]
class p2p.PeerSet--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.5;" width="75" x="630.5" y="335"/><ellipse cx="645.5" cy="351" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M644.7334,352.063 Q642.8823,351.3574 642.2266,350.5813 Q641.5708,349.8052 641.5708,348.4937 Q641.5708,346.8086 642.6499,345.8457 Q643.729,344.8828 645.6133,344.8828 Q646.4683,344.8828 647.3232,345.0779 Q648.1782,345.2729 649.0166,345.6548 L649.0166,348.0454 Q648.228,347.4893 647.4146,347.1987 Q646.6011,346.9082 645.8042,346.9082 Q644.916,346.9082 644.4429,347.2651 Q643.9697,347.6221 643.9697,348.2861 Q643.9697,348.8008 644.3142,349.137 Q644.6587,349.4731 645.7544,349.8799 L646.8086,350.2783 Q648.3027,350.8262 649.0083,351.731 Q649.7139,352.6357 649.7139,354.0137 Q649.7139,355.8896 648.6057,356.8152 Q647.4976,357.7407 645.2563,357.7407 Q644.335,357.7407 643.4094,357.5208 Q642.4839,357.3008 641.6206,356.8691 L641.6206,354.3374 Q642.6001,355.0347 643.5173,355.375 Q644.4346,355.7153 645.3311,355.7153 Q646.2358,355.7153 646.7339,355.3044 Q647.2319,354.8936 647.2319,354.1548 Q647.2319,353.5986 646.8999,353.1794 Q646.5679,352.7603 645.937,352.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="659.5" y="355.5352">PeerSet</text><!--MD5=[37628d08395bda41cda4b3616adc29df]
class p2p.Reactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="491" y="519"/><ellipse cx="506" cy="535" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M502.4277,531.2651 L502.4277,529.1069 L509.8071,529.1069 L509.8071,531.2651 L507.3418,531.2651 L507.3418,539.3418 L509.8071,539.3418 L509.8071,541.5 L502.4277,541.5 L502.4277,539.3418 L504.8931,539.3418 L504.8931,531.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="44" x="520" y="539.5352">Reactor</text><!--MD5=[b34240524190d792e7d8883f18bd4dc7]
class p2p.Switch--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.Switch" style="stroke: #A80036; stroke-width: 1.5;" width="67" x="627.5" y="427"/><ellipse cx="642.5" cy="443" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M641.7334,444.063 Q639.8823,443.3574 639.2266,442.5813 Q638.5708,441.8052 638.5708,440.4937 Q638.5708,438.8086 639.6499,437.8457 Q640.729,436.8828 642.6133,436.8828 Q643.4683,436.8828 644.3232,437.0779 Q645.1782,437.2729 646.0166,437.6548 L646.0166,440.0454 Q645.228,439.4893 644.4146,439.1987 Q643.6011,438.9082 642.8042,438.9082 Q641.916,438.9082 641.4429,439.2651 Q640.9697,439.6221 640.9697,440.2861 Q640.9697,440.8008 641.3142,441.137 Q641.6587,441.4731 642.7544,441.8799 L643.8086,442.2783 Q645.3027,442.8262 646.0083,443.731 Q646.7139,444.6357 646.7139,446.0137 Q646.7139,447.8896 645.6057,448.8152 Q644.4976,449.7407 642.2563,449.7407 Q641.335,449.7407 640.4094,449.5208 Q639.4839,449.3008 638.6206,448.8691 L638.6206,446.3374 Q639.6001,447.0347 640.5173,447.375 Q641.4346,447.7153 642.3311,447.7153 Q643.2358,447.7153 643.7339,447.3044 Q644.2319,446.8936 644.2319,446.1548 Q644.2319,445.5986 643.8999,445.1794 Q643.5679,444.7603 642.937,444.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="656.5" y="447.5352">Switch</text><!--MD5=[18cff6f764bb194711d9f5dd93f9c958]
class p2p.Transport--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.Transport" style="stroke: #A80036; stroke-width: 1.5;" width="89" x="506.5" y="335"/><ellipse cx="521.5" cy="351" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M517.9277,347.2651 L517.9277,345.1069 L525.3071,345.1069 L525.3071,347.2651 L522.8418,347.2651 L522.8418,355.3418 L525.3071,355.3418 L525.3071,357.5 L517.9277,357.5 L517.9277,355.3418 L520.3931,355.3418 L520.3931,347.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="535.5" y="355.5352">Transport</text><!--MD5=[6fef2d861d215382f2c7392a760d324d]
class p2p.peer--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.peer" style="stroke: #A80036; stroke-width: 1.5;" width="59" x="533.5" y="243"/><ellipse cx="548.5" cy="259" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M547.7334,260.063 Q545.8823,259.3574 545.2266,258.5813 Q544.5708,257.8052 544.5708,256.4937 Q544.5708,254.8086 545.6499,253.8457 Q546.729,252.8828 548.6133,252.8828 Q549.4683,252.8828 550.3232,253.0779 Q551.1782,253.2729 552.0166,253.6548 L552.0166,256.0454 Q551.228,255.4893 550.4146,255.1987 Q549.6011,254.9082 548.8042,254.9082 Q547.916,254.9082 547.4429,255.2651 Q546.9697,255.6221 546.9697,256.2861 Q546.9697,256.8008 547.3142,257.137 Q547.6587,257.4731 548.7544,257.8799 L549.8086,258.2783 Q551.3027,258.8262 552.0083,259.731 Q552.7139,260.6357 552.7139,262.0137 Q552.7139,263.8896 551.6057,264.8152 Q550.4976,265.7407 548.2563,265.7407 Q547.335,265.7407 546.4094,265.5208 Q545.4839,265.3008 544.6206,264.8691 L544.6206,262.3374 Q545.6001,263.0347 546.5173,263.375 Q547.4346,263.7153 548.3311,263.7153 Q549.2358,263.7153 549.7339,263.3044 Q550.2319,262.8936 550.2319,262.1548 Q550.2319,261.5986 549.8999,261.1794 Q549.5679,260.7603 548.937,260.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="27" x="562.5" y="263.5352">peer</text><!--MD5=[f2ba958c56ea10e04681f7ec6c9a06ea]
class p2p.peerConn--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.peerConn" style="stroke: #A80036; stroke-width: 1.5;" width="88" x="465" y="151"/><ellipse cx="480" cy="167" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M479.2334,168.063 Q477.3823,167.3574 476.7266,166.5813 Q476.0708,165.8052 476.0708,164.4937 Q476.0708,162.8086 477.1499,161.8457 Q478.229,160.8828 480.1133,160.8828 Q480.9683,160.8828 481.8232,161.0779 Q482.6782,161.2729 483.5166,161.6548 L483.5166,164.0454 Q482.728,163.4893 481.9146,163.1987 Q481.1011,162.9082 480.3042,162.9082 Q479.416,162.9082 478.9429,163.2651 Q478.4697,163.6221 478.4697,164.2861 Q478.4697,164.8008 478.8142,165.137 Q479.1587,165.4731 480.2544,165.8799 L481.3086,166.2783 Q482.8027,166.8262 483.5083,167.731 Q484.2139,168.6357 484.2139,170.0137 Q484.2139,171.8896 483.1057,172.8152 Q481.9976,173.7407 479.7563,173.7407 Q478.835,173.7407 477.9094,173.5208 Q476.9839,173.3008 476.1206,172.8691 L476.1206,170.3374 Q477.1001,171.0347 478.0173,171.375 Q478.9346,171.7153 479.8311,171.7153 Q480.7358,171.7153 481.2339,171.3044 Q481.7319,170.8936 481.7319,170.1548 Q481.7319,169.5986 481.3999,169.1794 Q481.0679,168.7603 480.437,168.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="494" y="171.5352">peerConn</text><!--MD5=[c22516aed28ee4c58d2db0be50dce8ef]
class p2p.transportLifecycle--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="p2p.transportLifecycle" style="stroke: #A80036; stroke-width: 1.5;" width="133" x="338.5" y="335"/><ellipse cx="353.5" cy="351" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M349.9277,347.2651 L349.9277,345.1069 L357.3071,345.1069 L357.3071,347.2651 L354.8418,347.2651 L354.8418,355.3418 L357.3071,355.3418 L357.3071,357.5 L349.9277,357.5 L349.9277,355.3418 L352.3931,355.3418 L352.3931,347.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="367.5" y="355.5352">transportLifecycle</text><!--MD5=[0d02e3e0fbf54d9506c3b34b685878a1]
class mempool.CListMempool--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="mempool.CListMempool" style="stroke: #A80036; stroke-width: 1.5;" width="112" x="170" y="519"/><ellipse cx="185" cy="535" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M184.2334,536.063 Q182.3823,535.3574 181.7266,534.5813 Q181.0708,533.8052 181.0708,532.4937 Q181.0708,530.8086 182.1499,529.8457 Q183.229,528.8828 185.1133,528.8828 Q185.9683,528.8828 186.8232,529.0779 Q187.6782,529.2729 188.5166,529.6548 L188.5166,532.0454 Q187.728,531.4893 186.9146,531.1987 Q186.1011,530.9082 185.3042,530.9082 Q184.416,530.9082 183.9429,531.2651 Q183.4697,531.6221 183.4697,532.2861 Q183.4697,532.8008 183.8142,533.137 Q184.1587,533.4731 185.2544,533.8799 L186.3086,534.2783 Q187.8027,534.8262 188.5083,535.731 Q189.2139,536.6357 189.2139,538.0137 Q189.2139,539.8896 188.1057,540.8152 Q186.9976,541.7407 184.7563,541.7407 Q183.835,541.7407 182.9094,541.5208 Q181.9839,541.3008 181.1206,540.8691 L181.1206,538.3374 Q182.1001,539.0347 183.0173,539.375 Q183.9346,539.7153 184.8311,539.7153 Q185.7358,539.7153 186.2339,539.3044 Q186.7319,538.8936 186.7319,538.1548 Q186.7319,537.5986 186.3999,537.1794 Q186.0679,536.7603 185.437,536.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="199" y="539.5352">CListMempool</text><!--MD5=[827e6d4d689e9192117e9f34d94d7f85]
class mempool.Mempool--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="mempool.Mempool" style="stroke: #A80036; stroke-width: 1.5;" width="85" x="183.5" y="427"/><ellipse cx="198.5" cy="443" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M194.9277,439.2651 L194.9277,437.1069 L202.3071,437.1069 L202.3071,439.2651 L199.8418,439.2651 L199.8418,447.3418 L202.3071,447.3418 L202.3071,449.5 L194.9277,449.5 L194.9277,447.3418 L197.3931,447.3418 L197.3931,439.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="53" x="212.5" y="447.5352">Mempool</text><!--MD5=[5798ab4fec092a19736edce69bd07da2]
class mempool.Reactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="mempool.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="197" y="611"/><ellipse cx="212" cy="627" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M211.2334,628.063 Q209.3823,627.3574 208.7266,626.5813 Q208.0708,625.8052 208.0708,624.4937 Q208.0708,622.8086 209.1499,621.8457 Q210.229,620.8828 212.1133,620.8828 Q212.9683,620.8828 213.8232,621.0779 Q214.6782,621.2729 215.5166,621.6548 L215.5166,624.0454 Q214.728,623.4893 213.9146,623.1987 Q213.1011,622.9082 212.3042,622.9082 Q211.416,622.9082 210.9429,623.2651 Q210.4697,623.6221 210.4697,624.2861 Q210.4697,624.8008 210.8142,625.137 Q211.1587,625.4731 212.2544,625.8799 L213.3086,626.2783 Q214.8027,626.8262 215.5083,627.731 Q216.2139,628.6357 216.2139,630.0137 Q216.2139,631.8896 215.1057,632.8152 Q213.9976,633.7407 211.7563,633.7407 Q210.835,633.7407 209.9094,633.5208 Q208.9839,633.3008 208.1206,632.8691 L208.1206,630.3374 Q209.1001,631.0347 210.0173,631.375 Q210.9346,631.7153 211.8311,631.7153 Q212.7358,631.7153 213.2339,631.3044 Q213.7319,630.8936 213.7319,630.1548 Q213.7319,629.5986 213.3999,629.1794 Q213.0679,628.7603 212.437,628.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="226" y="631.5352">Reactor</text><!--MD5=[afe5de84d5e2fc73341ea0251c5bc27b]
class consensus.Reactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="consensus.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="894" y="611"/><ellipse cx="909" cy="627" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M908.2334,628.063 Q906.3823,627.3574 905.7266,626.5813 Q905.0708,625.8052 905.0708,624.4937 Q905.0708,622.8086 906.1499,621.8457 Q907.229,620.8828 909.1133,620.8828 Q909.9683,620.8828 910.8232,621.0779 Q911.6782,621.2729 912.5166,621.6548 L912.5166,624.0454 Q911.728,623.4893 910.9146,623.1987 Q910.1011,622.9082 909.3042,622.9082 Q908.416,622.9082 907.9429,623.2651 Q907.4697,623.6221 907.4697,624.2861 Q907.4697,624.8008 907.8142,625.137 Q908.1587,625.4731 909.2544,625.8799 L910.3086,626.2783 Q911.8027,626.8262 912.5083,627.731 Q913.2139,628.6357 913.2139,630.0137 Q913.2139,631.8896 912.1057,632.8152 Q910.9976,633.7407 908.7563,633.7407 Q907.835,633.7407 906.9094,633.5208 Q905.9839,633.3008 905.1206,632.8691 L905.1206,630.3374 Q906.1001,631.0347 907.0173,631.375 Q907.9346,631.7153 908.8311,631.7153 Q909.7358,631.7153 910.2339,631.3044 Q910.7319,630.8936 910.7319,630.1548 Q910.7319,629.5986 910.3999,629.1794 Q910.0679,628.7603 909.437,628.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="923" y="631.5352">Reactor</text><!--MD5=[7524d425873270deeeeae269ab4b26d6]
class consensus.State--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="consensus.State" style="stroke: #A80036; stroke-width: 1.5;" width="60" x="912" y="519"/><ellipse cx="927" cy="535" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M926.2334,536.063 Q924.3823,535.3574 923.7266,534.5813 Q923.0708,533.8052 923.0708,532.4937 Q923.0708,530.8086 924.1499,529.8457 Q925.229,528.8828 927.1133,528.8828 Q927.9683,528.8828 928.8232,529.0779 Q929.6782,529.2729 930.5166,529.6548 L930.5166,532.0454 Q929.728,531.4893 928.9146,531.1987 Q928.1011,530.9082 927.3042,530.9082 Q926.416,530.9082 925.9429,531.2651 Q925.4697,531.6221 925.4697,532.2861 Q925.4697,532.8008 925.8142,533.137 Q926.1587,533.4731 927.2544,533.8799 L928.3086,534.2783 Q929.8027,534.8262 930.5083,535.731 Q931.2139,536.6357 931.2139,538.0137 Q931.2139,539.8896 930.1057,540.8152 Q928.9976,541.7407 926.7563,541.7407 Q925.835,541.7407 924.9094,541.5208 Q923.9839,541.3008 923.1206,540.8691 L923.1206,538.3374 Q924.1001,539.0347 925.0173,539.375 Q925.9346,539.7153 926.8311,539.7153 Q927.7358,539.7153 928.2339,539.3044 Q928.7319,538.8936 928.7319,538.1548 Q928.7319,537.5986 928.3999,537.1794 Q928.0679,536.7603 927.437,536.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="28" x="941" y="539.5352">State</text><!--MD5=[459774bc3132a512e803dcb14c2490a9]
class consensus.TimeoutTicker--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="consensus.TimeoutTicker" style="stroke: #A80036; stroke-width: 1.5;" width="115" x="883.5" y="335"/><ellipse cx="898.5" cy="351" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M894.9277,347.2651 L894.9277,345.1069 L902.3071,345.1069 L902.3071,347.2651 L899.8418,347.2651 L899.8418,355.3418 L902.3071,355.3418 L902.3071,357.5 L894.9277,357.5 L894.9277,355.3418 L897.3931,355.3418 L897.3931,347.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="83" x="912.5" y="355.5352">TimeoutTicker</text><!--MD5=[6539bd3ad3538eb8cc5d99485abe7976]
class consensus.timeoutTicker--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.5;" width="111" x="886.5" y="427"/><ellipse cx="901.5" cy="443" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M900.7334,444.063 Q898.8823,443.3574 898.2266,442.5813 Q897.5708,441.8052 897.5708,440.4937 Q897.5708,438.8086 898.6499,437.8457 Q899.729,436.8828 901.6133,436.8828 Q902.4683,436.8828 903.3232,437.0779 Q904.1782,437.2729 905.0166,437.6548 L905.0166,440.0454 Q904.228,439.4893 903.4146,439.1987 Q902.6011,438.9082 901.8042,438.9082 Q900.916,438.9082 900.4429,439.2651 Q899.9697,439.6221 899.9697,440.2861 Q899.9697,440.8008 900.3142,441.137 Q900.6587,441.4731 901.7544,441.8799 L902.8086,442.2783 Q904.3027,442.8262 905.0083,443.731 Q905.7139,444.6357 905.7139,446.0137 Q905.7139,447.8896 904.6057,448.8152 Q903.4976,449.7407 901.2563,449.7407 Q900.335,449.7407 899.4094,449.5208 Q898.4839,449.3008 897.6206,448.8691 L897.6206,446.3374 Q898.6001,447.0347 899.5173,447.375 Q900.4346,447.7153 901.3311,447.7153 Q902.2358,447.7153 902.7339,447.3044 Q903.2319,446.8936 903.2319,446.1548 Q903.2319,445.5986 902.8999,445.1794 Q902.5679,444.7603 901.937,444.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="915.5" y="447.5352">timeoutTicker</text><!--MD5=[f90addf20bd1e85cf17f517894494b4c]
class service.BaseService--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="service.BaseService" style="stroke: #A80036; stroke-width: 1.5;" width="99" x="891.5" y="151"/><ellipse cx="906.5" cy="167" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M905.7334,168.063 Q903.8823,167.3574 903.2266,166.5813 Q902.5708,165.8052 902.5708,164.4937 Q902.5708,162.8086 903.6499,161.8457 Q904.729,160.8828 906.6133,160.8828 Q907.4683,160.8828 908.3232,161.0779 Q909.1782,161.2729 910.0166,161.6548 L910.0166,164.0454 Q909.228,163.4893 908.4146,163.1987 Q907.6011,162.9082 906.8042,162.9082 Q905.916,162.9082 905.4429,163.2651 Q904.9697,163.6221 904.9697,164.2861 Q904.9697,164.8008 905.3142,165.137 Q905.6587,165.4731 906.7544,165.8799 L907.8086,166.2783 Q909.3027,166.8262 910.0083,167.731 Q910.7139,168.6357 910.7139,170.0137 Q910.7139,171.8896 909.6057,172.8152 Q908.4976,173.7407 906.2563,173.7407 Q905.335,173.7407 904.4094,173.5208 Q903.4839,173.3008 902.6206,172.8691 L902.6206,170.3374 Q903.6001,171.0347 904.5173,171.375 Q905.4346,171.7153 906.3311,171.7153 Q907.2358,171.7153 907.7339,171.3044 Q908.2319,170.8936 908.2319,170.1548 Q908.2319,169.5986 907.8999,169.1794 Q907.5679,168.7603 906.937,168.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="920.5" y="171.5352">BaseService</text><!--MD5=[fd25aa4d66dcc726e577441cd7f3c4c1]
class service.Service--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="service.Service" style="stroke: #A80036; stroke-width: 1.5;" width="72" x="905" y="59"/><ellipse cx="920" cy="75" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M916.4277,71.2651 L916.4277,69.1069 L923.8071,69.1069 L923.8071,71.2651 L921.3418,71.2651 L921.3418,79.3418 L923.8071,79.3418 L923.8071,81.5 L916.4277,81.5 L916.4277,79.3418 L918.8931,79.3418 L918.8931,71.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="40" x="934" y="79.5352">Service</text><!--MD5=[25fe063c8a3f29e5d7c6ad772f20110d]
class pex.AddrBook--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="pex.AddrBook" style="stroke: #A80036; stroke-width: 1.5;" width="89" x="1176.5" y="427"/><ellipse cx="1191.5" cy="443" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1187.9277,439.2651 L1187.9277,437.1069 L1195.3071,437.1069 L1195.3071,439.2651 L1192.8418,439.2651 L1192.8418,447.3418 L1195.3071,447.3418 L1195.3071,449.5 L1187.9277,449.5 L1187.9277,447.3418 L1190.3931,447.3418 L1190.3931,439.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="1205.5" y="447.5352">AddrBook</text><!--MD5=[50f3d529d9046543c45825871bb0cefd]
class pex.Reactor--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="pex.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="1179" y="611"/><ellipse cx="1194" cy="627" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1193.2334,628.063 Q1191.3823,627.3574 1190.7266,626.5813 Q1190.0708,625.8052 1190.0708,624.4937 Q1190.0708,622.8086 1191.1499,621.8457 Q1192.229,620.8828 1194.1133,620.8828 Q1194.9683,620.8828 1195.8232,621.0779 Q1196.6782,621.2729 1197.5166,621.6548 L1197.5166,624.0454 Q1196.728,623.4893 1195.9146,623.1987 Q1195.1011,622.9082 1194.3042,622.9082 Q1193.416,622.9082 1192.9429,623.2651 Q1192.4697,623.6221 1192.4697,624.2861 Q1192.4697,624.8008 1192.8142,625.137 Q1193.1587,625.4731 1194.2544,625.8799 L1195.3086,626.2783 Q1196.8027,626.8262 1197.5083,627.731 Q1198.2139,628.6357 1198.2139,630.0137 Q1198.2139,631.8896 1197.1057,632.8152 Q1195.9976,633.7407 1193.7563,633.7407 Q1192.835,633.7407 1191.9094,633.5208 Q1190.9839,633.3008 1190.1206,632.8691 L1190.1206,630.3374 Q1191.1001,631.0347 1192.0173,631.375 Q1192.9346,631.7153 1193.8311,631.7153 Q1194.7358,631.7153 1195.2339,631.3044 Q1195.7319,630.8936 1195.7319,630.1548 Q1195.7319,629.5986 1195.3999,629.1794 Q1195.0679,628.7603 1194.437,628.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="1208" y="631.5352">Reactor</text><!--MD5=[1702e2ab1767e10b6b96d3abf14550ab]
class pex.addrBook--><rect fill="#FEFECE" filter="url(#fa5c0nskcm8zr)" height="32" id="pex.addrBook" style="stroke: #A80036; stroke-width: 1.5;" width="88" x="1177" y="519"/><ellipse cx="1192" cy="535" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1191.2334,536.063 Q1189.3823,535.3574 1188.7266,534.5813 Q1188.0708,533.8052 1188.0708,532.4937 Q1188.0708,530.8086 1189.1499,529.8457 Q1190.229,528.8828 1192.1133,528.8828 Q1192.9683,528.8828 1193.8232,529.0779 Q1194.6782,529.2729 1195.5166,529.6548 L1195.5166,532.0454 Q1194.728,531.4893 1193.9146,531.1987 Q1193.1011,530.9082 1192.3042,530.9082 Q1191.416,530.9082 1190.9429,531.2651 Q1190.4697,531.6221 1190.4697,532.2861 Q1190.4697,532.8008 1190.8142,533.137 Q1191.1587,533.4731 1192.2544,533.8799 L1193.3086,534.2783 Q1194.8027,534.8262 1195.5083,535.731 Q1196.2139,536.6357 1196.2139,538.0137 Q1196.2139,539.8896 1195.1057,540.8152 Q1193.9976,541.7407 1191.7563,541.7407 Q1190.835,541.7407 1189.9094,541.5208 Q1188.9839,541.3008 1188.1206,540.8691 L1188.1206,538.3374 Q1189.1001,539.0347 1190.0173,539.375 Q1190.9346,539.7153 1191.8311,539.7153 Q1192.7358,539.7153 1193.2339,539.3044 Q1193.7319,538.8936 1193.7319,538.1548 Q1193.7319,537.5986 1193.3999,537.1794 Q1193.0679,536.7603 1192.437,536.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="1206" y="539.5352">addrBook</text><!--MD5=[fb0e8f546a54530273f5e6ecfa9545bc]
reverse link p2p.BaseReactor to evidence.Reactor--><path d="M621.55,557.85 C610.15,564.48 596.94,571.06 584,575 C400.56,630.93 343.99,584.85 154,611 C141.02,612.79 126.93,615.31 114.35,617.78 " fill="none" id="p2p.BaseReactor&lt;-evidence.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="632.7,551.01,625.4943,550.7308,622.4652,557.2749,629.6709,557.554,632.7,551.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[52db47100375e0bfc2325558423d152f]
reverse link evidence.Pool to evidence.Reactor--><path d="M76,556.62 C76,573.19 76,596.08 76,610.96 " fill="none" id="evidence.Pool&lt;-evidence.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="76,551.27,72,560.27,76,556.27,80,560.27,76,551.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="42" x="26.5187" y="600.1976">evpool</text><!--MD5=[a6a5fb2cd11d7bd41528e5b6f3061272]
reverse link evidence.Store to evidence.Pool--><path d="M76,464.62 C76,481.19 76,504.08 76,518.96 " fill="none" id="evidence.Store&lt;-evidence.Pool" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="76,459.27,72,468.27,76,464.27,80,468.27,76,459.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="38.3" y="508.1976">store</text><!--MD5=[939fce458533f5798e80ca838a4a01f7]
reverse link p2p.BaseReactor to mempool.Reactor--><path d="M620.52,557.9 C609.31,564.33 596.48,570.77 584,575 C475.26,611.85 338.59,622.08 273.23,624.91 " fill="none" id="p2p.BaseReactor&lt;-mempool.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="631.96,551.02,624.7567,550.6838,621.6759,557.2036,628.8792,557.5399,631.96,551.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d544c30e9d9a2f679bf2da5b8a8fe0f8]
reverse link mempool.Mempool to mempool.CListMempool--><path d="M226,479.61 C226,493.31 226,508.22 226,518.96 " fill="none" id="mempool.Mempool&lt;-mempool.CListMempool" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="219,479.27,226,459.27,233,479.27,219,479.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d70b6ddb83e9a255dc4aeb6704f07e46]
reverse link mempool.CListMempool to mempool.Reactor--><path d="M228.06,556.62 C229.72,573.19 232.01,596.08 233.5,610.96 " fill="none" id="mempool.CListMempool&lt;-mempool.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="227.53,551.27,224.448,560.6242,228.0289,556.245,232.4081,559.8259,227.53,551.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="59" x="163.4563" y="600.1976">mempool</text><!--MD5=[6b8e3757e575e9f6946e6159fc51148a]
reverse link p2p.BaseReactor to consensus.Reactor--><path d="M713.15,555.15 C767.73,572.82 847.18,598.54 893.82,613.64 " fill="none" id="p2p.BaseReactor&lt;-consensus.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700.53,551.06,705.0084,556.7119,711.948,554.7517,707.4696,549.0999,700.53,551.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[18cc743c9af220becef2c54c3ab06642]
reverse link service.BaseService to consensus.State--><path d="M976.17,190.72 C994.41,204.05 1015.78,222.32 1030,243 C1043.06,262 1043.17,269.27 1047,292 C1059.56,366.52 1054.71,394.7 1015,459 C1000.39,482.65 977.17,504.82 960.85,518.83 " fill="none" id="service.BaseService&lt;-consensus.State" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="965.31,183.08,967.9122,189.8052,975.1209,189.9898,972.5187,183.2646,965.31,183.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c29d0d0f347904d208386409630019bc]
reverse link service.BaseService to consensus.timeoutTicker--><path d="M962.09,193.35 C980.39,217.13 1005.56,254.55 1016,292 C1024.95,324.11 1028.65,336.16 1016,367 C1005.65,392.22 982.28,413.49 964.55,426.86 " fill="none" id="service.BaseService&lt;-consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="953.99,183.13,954.5814,190.3168,961.4428,192.5351,960.8514,185.3483,953.99,183.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2b2b8204af6f9dba9202740b5f15b139]
reverse link consensus.TimeoutTicker to consensus.timeoutTicker--><path d="M941.4,387.61 C941.55,401.31 941.71,416.22 941.83,426.96 " fill="none" id="consensus.TimeoutTicker&lt;-consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="934.39,387.34,941.17,367.27,948.39,387.19,934.39,387.34" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[369a72accf9e8f79e2efdad599083518]
reverse link consensus.State to consensus.Reactor--><path d="M939.71,556.62 C937.87,573.19 935.32,596.08 933.67,610.96 " fill="none" id="consensus.State&lt;-consensus.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="940.3,551.27,935.3225,559.7685,939.7431,556.2389,943.2728,560.6595,940.3,551.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="30" x="898.9212" y="600.1976">conS</text><!--MD5=[7fb28dab5e661837276b0bd759804c53]
reverse link consensus.timeoutTicker to consensus.State--><path d="M942,464.62 C942,481.19 942,504.08 942,518.96 " fill="none" id="consensus.timeoutTicker&lt;-consensus.State" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="942,459.27,938,468.27,942,464.27,946,468.27,942,459.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="88" x="838.325" y="508.1976">timeoutTicker</text><!--MD5=[125ca6c2eebb5c9a5f38ac24c4b9aa12]
reverse link p2p.BaseReactor to pex.Reactor--><path d="M718.45,548.43 C760.64,556.41 817.02,566.79 867,575 C980.16,593.6 1114.48,612.2 1178.86,620.91 " fill="none" id="p2p.BaseReactor&lt;-pex.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="705.56,545.98,710.7071,551.0304,717.3488,548.2217,712.2016,543.1713,705.56,545.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b4c5bfb9e7b5318381569743a01090dc]
reverse link service.BaseService to pex.addrBook--><path d="M1003.2,186.38 C1084.61,214.2 1223.86,275.59 1283,384 C1298.96,413.26 1294.29,427.64 1283,459 C1274.31,483.16 1254.08,505.07 1239.08,518.89 " fill="none" id="service.BaseService&lt;-pex.addrBook" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="990.65,182.21,995.0811,187.899,1002.0368,185.9968,997.6057,180.3078,990.65,182.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c7db04e7ef83a300009491f029ecf546]
reverse link pex.AddrBook to pex.addrBook--><path d="M1221,479.61 C1221,493.31 1221,508.22 1221,518.96 " fill="none" id="pex.AddrBook&lt;-pex.addrBook" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1214,479.27,1221,459.27,1228,479.27,1214,479.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3b08fb894cbd8c66664fcb197a3ccee8]
reverse link pex.addrBook to pex.Reactor--><path d="M1220.08,556.62 C1219.35,573.19 1218.33,596.08 1217.67,610.96 " fill="none" id="pex.addrBook&lt;-pex.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1220.32,551.27,1215.9132,560.0779,1220.0917,556.2648,1223.9048,560.4433,1220.32,551.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="1180.2087" y="600.1976">book</text><!--MD5=[ac75108900a7da53673606bc12d5f375]
reverse link service.Service to service.BaseService--><path d="M941,111.61 C941,125.31 941,140.22 941,150.96 " fill="none" id="service.Service&lt;-service.BaseService" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="934,111.27,941,91.27,948,111.27,934,111.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b3ca9392012dbc1ca56a23f1d34c5e32]
reverse link service.BaseService to p2p.BaseReactor--><path d="M921,193.5 C865.45,264.35 710.41,462.06 666.02,518.67 " fill="none" id="service.BaseService&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="929.03,183.26,922.1789,185.51,921.6208,192.6995,928.4719,190.4495,929.03,183.26" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7d115f226f55dd9d7554f262bc6df33a]
reverse link p2p.Reactor to p2p.BaseReactor--><path d="M587.22,535 C592.28,535 597.34,535 602.39,535 " fill="none" id="p2p.Reactor&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="587.09,542,567.09,535,587.09,528,587.09,542" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9fbf2a7effaeaefa17c476384a1dba2]
reverse link p2p.peerConn to p2p.peer--><path d="M524.88,194.46 C534.36,210.27 546.06,229.76 553.97,242.96 " fill="none" id="p2p.peerConn&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="518.16,183.27,517.8238,190.4733,524.3436,193.5541,524.6799,186.3508,518.16,183.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a4829d3d32a44b3a8142c2ba0a35b7f2]
reverse link service.BaseService to p2p.peer--><path d="M878.53,180.48 C811.69,194.22 702.74,217.74 610,243 C604.38,244.53 598.43,246.31 592.72,248.09 " fill="none" id="service.BaseService&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="891.32,177.86,884.6385,175.1474,879.5648,180.2717,886.2463,182.9842,891.32,177.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0c3700d192805ae30ab006e56b4633f3]
reverse link p2p.Transport to p2p.MultiplexTransport--><path d="M539.84,386.63 C535.34,400.59 530.39,415.96 526.85,426.96 " fill="none" id="p2p.Transport&lt;-p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="533.28,384.16,546.08,367.27,546.61,388.45,533.28,384.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5fcf14daa37ccae53c4b796a0afc96ba]
reverse link p2p.transportLifecycle to p2p.MultiplexTransport--><path d="M440.65,379.42 C460.93,395.02 485.54,413.96 502.35,426.89 " fill="none" id="p2p.transportLifecycle&lt;-p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="436.17,384.81,424.58,367.06,444.7,373.71,436.17,384.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[050d08726fdf1574cedda3f8be396e30]
reverse link p2p.IPeerSet to p2p.PeerSet--><path d="M667.4,295.61 C667.55,309.31 667.71,324.22 667.83,334.96 " fill="none" id="p2p.IPeerSet&lt;-p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="660.39,295.34,667.17,275.27,674.39,295.19,660.39,295.34" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a88ba8938669b8d1f443f70d77216d8b]
reverse link p2p.Peer to p2p.peer--><path d="M597.4,200.67 C588.72,215.13 578.93,231.44 572.03,242.96 " fill="none" id="p2p.Peer&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="591.55,196.82,607.84,183.27,603.55,204.02,591.55,196.82" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[dcbf72c94169c61b66662e1a7585d331]
reverse link service.BaseService to p2p.Switch--><path d="M890.13,188.51 C862.52,201.34 829.03,219.85 804,243 C755.68,287.7 762.03,313.99 723,367 C707.17,388.49 687.27,412.03 674.34,426.89 " fill="none" id="service.BaseService&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="902.34,183.01,895.2276,181.8209,891.3945,187.9289,898.5069,189.118,902.34,183.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6e480aef305aad66a6c56b9453c18417]
link p2p.Switch to p2p.BaseReactor--><path d="M649.96,459.27 C645.31,474.23 643.19,497.12 644.71,513.63 " fill="none" id="p2p.Switch-&gt;p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="645.37,518.96,648.2328,509.5364,644.7551,513.998,640.2936,510.5202,645.37,518.96" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="51" x="589.6517" y="479.605">reactors</text><!--MD5=[b14611813044e641dc988996b3ed6edd]
reverse link p2p.Switch to p2p.BaseReactor--><path d="M670.95,464.62 C672.6,481.19 670.43,504.08 665.55,518.96 " fill="none" id="p2p.Switch&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="670.25,459.27,667.4407,468.7097,670.893,464.2285,675.3742,467.6808,670.25,459.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="41" x="621.3616" y="508.1976">Switch</text><!--MD5=[1ab1a2ae8783d41482bcd0d71e5c3297]
reverse link p2p.PeerSet to p2p.Switch--><path d="M666.4,372.62 C665.11,389.19 663.33,412.08 662.17,426.96 " fill="none" id="p2p.PeerSet&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="666.81,367.27,662.1277,375.9347,666.4243,372.2551,670.1039,376.5517,666.81,367.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="34" x="622.5306" y="416.1976">peers</text><!--MD5=[9fe161fb271e8b8d4eeb24ae21c077f8]
reverse link p2p.MultiplexTransport to p2p.Switch--><path d="M597.74,443 C607.6,443 617.47,443 627.33,443 " fill="none" id="p2p.MultiplexTransport&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="592.59,443,601.59,447,597.59,443,601.59,439,592.59,443" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="561.0567" y="424.3113">transport</text><!--MD5=[2c56d9259f5f2a3bf68e766ea18eda88]
reverse link p2p.peer to p2p.PeerSet--><path d="M593.77,278.03 C600.33,282.32 607.06,287.09 613,292 C628.83,305.08 644.74,322.42 655.35,334.73 " fill="none" id="p2p.peer&lt;-p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="589.27,275.14,594.6776,283.3715,593.4759,277.8438,599.0036,276.6421,589.27,275.14" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="20" x="627.5641" y="324.1808">list</text><!--MD5=[6aa1cdfe3a356e3e6d3731b6ca2d393b]
@startuml

namespace evidence {
    class Pool << (S,Aquamarine) >> {
        - logger log.Logger
        - store *Store
        - evidenceList *clist.CList
        - stateDB tm-db.DB
        - mtx sync.Mutex
        - state state.State

        - removeEvidence(height int64, ....) 

        + EvidenceFront() *clist.CElement
        + EvidenceWaitChan() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + SetLogger(l log.Logger) 
        + PriorityEvidence() []types.Evidence
        + PendingEvidence(maxNum int64) []types.Evidence
        + State() state.State
        + Update(block *types.Block, state state.State) 
        + AddEvidence(evidence types.Evidence) error
        + MarkEvidenceAsCommitted(height int64, ....) 
        + IsCommitted(evidence types.Evidence) bool

    }
    class Reactor << (S,Aquamarine) >> {
        - evpool *Pool
        - eventBus *types.EventBus

        - broadcastEvidenceRoutine(peer p2p.Peer) 
        - checkSendEvidenceMessage(peer p2p.Peer, ev types.Evidence) (Message, bool)

        + SetLogger(l log.Logger) 
        + GetChannels() []*p2p.ChannelDescriptor
        + AddPeer(peer p2p.Peer) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 
        + SetEventBus(b *types.EventBus) 

    }
    class Store << (S,Aquamarine) >> {
        - db tm-db.DB

        - listEvidence(prefixKey string, maxNum int64) []types.Evidence
        - getInfo(evidence types.Evidence) Info

        + PriorityEvidence() []types.Evidence
        + PendingEvidence(maxNum int64) []types.Evidence
        + GetInfo(height int64, hash []byte) Info
        + AddNewEvidence(evidence types.Evidence, priority int64) bool
        + MarkEvidenceAsBroadcasted(evidence types.Evidence) 
        + MarkEvidenceAsCommitted(evidence types.Evidence) 

    }
}
"p2p.BaseReactor" *-down- "evidence.Reactor"
"evidence.Pool" <.. "evpool" "evidence.Reactor"
"evidence.Store" <.. "store" "evidence.Pool"

namespace mempool {
    class CListMempool << (S,Aquamarine) >> {
        - height int64
        - txsBytes int64
        - rechecking int32
        - notifiedTxsAvailable bool
        - txsAvailable <font color=blue>chan</font> <font color=blue>struct</font>{}
        - config *config.MempoolConfig
        - proxyMtx sync.Mutex
        - proxyAppConn proxy.AppConnMempool
        - txs *clist.CList
        - preCheck PreCheckFunc
        - postCheck PostCheckFunc
        - recheckCursor *clist.CElement
        - recheckEnd *clist.CElement
        - txsMap sync.Map
        - cache txCache
        - wal *autofile.AutoFile
        - logger log.Logger
        - metrics *Metrics

        - globalCb(req *types.Request, res *types.Response) 
        - reqResCb(tx []byte, peerID uint16, ....) <font color=blue>func</font>(*types.Response) 
        - addTx(memTx *mempoolTx) 
        - removeTx(tx types.Tx, elem *clist.CElement, removeFromCache bool) 
        - resCbFirstTime(tx []byte, peerID uint16, peerP2PID p2p.ID, res *types.Response) 
        - resCbRecheck(req *types.Request, res *types.Response) 
        - notifyTxsAvailable() 
        - recheckTxs() 

        + EnableTxsAvailable() 
        + SetLogger(l log.Logger) 
        + InitWAL() 
        + CloseWAL() 
        + Lock() 
        + Unlock() 
        + Size() int
        + TxsBytes() int64
        + FlushAppConn() error
        + Flush() 
        + TxsFront() *clist.CElement
        + TxsWaitChan() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + CheckTx(tx types.Tx, cb <font color=blue>func</font>(*types.Response) , txInfo TxInfo) error
        + TxsAvailable() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + ReapMaxBytesMaxGas(maxBytes int64, maxGas int64) types.Txs
        + ReapMaxTxs(max int) types.Txs
        + Update(height int64, ....) error

    }
    interface Mempool  {
        + CheckTx(tx types.Tx, callback <font color=blue>func</font>(*types.Response) , txInfo TxInfo) error
        + ReapMaxBytesMaxGas(maxBytes int64, maxGas int64) types.Txs
        + ReapMaxTxs(max int) types.Txs
        + Lock() 
        + Unlock() 
        + Update(blockHeight int64, ....) error
        + FlushAppConn() error
        + Flush() 
        + TxsAvailable() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + EnableTxsAvailable() 
        + Size() int
        + TxsBytes() int64
        + InitWAL() 
        + CloseWAL() 

    }
    class Reactor << (S,Aquamarine) >> {
        - config *config.MempoolConfig
        - mempool *CListMempool
        - ids *mempoolIDs

        - broadcastTxRoutine(peer p2p.Peer) 
        - decodeMsg(bz []byte) (Message, error)

        + InitPeer(peer p2p.Peer) p2p.Peer
        + SetLogger(l log.Logger) 
        + OnStart() error
        + GetChannels() []*p2p.ChannelDescriptor
        + AddPeer(peer p2p.Peer) 
        + RemovePeer(peer p2p.Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 

    }
}
"p2p.BaseReactor" *-down- "mempool.Reactor"

"mempool.Mempool" <|- - "mempool.CListMempool"

"mempool.CListMempool" <.. "mempool" "mempool.Reactor"

namespace consensus {
    class Reactor << (S,Aquamarine) >> {
        - conS *State
        - mtx sync.RWMutex
        - fastSync bool
        - eventBus *types.EventBus
        - metrics *Metrics

        - subscribeToBroadcastEvents() 
        - unsubscribeFromBroadcastEvents() 
        - broadcastNewRoundStepMessage(rs *types.RoundState) 
        - broadcastNewValidBlockMessage(rs *types.RoundState) 
        - broadcastHasVoteMessage(vote *types.Vote) 
        - sendNewRoundStepMessage(peer p2p.Peer) 
        - gossipDataRoutine(peer p2p.Peer, ps *PeerState) 
        - gossipDataForCatchup(logger log.Logger, rs *types.RoundState, prs *types.PeerRoundState, ps *PeerState, peer p2p.Peer) 
        - gossipVotesRoutine(peer p2p.Peer, ps *PeerState) 
        - gossipVotesForHeight(logger log.Logger, rs *types.RoundState, prs *types.PeerRoundState, ps *PeerState) bool
        - queryMaj23Routine(peer p2p.Peer, ps *PeerState) 
        - peerStatsRoutine() 
        - updateFastSyncingMetric() 

        + OnStart() error
        + OnStop() 
        + SwitchToConsensus(state state.State, blocksSynced uint64) 
        + GetChannels() []*p2p.ChannelDescriptor
        + InitPeer(peer p2p.Peer) p2p.Peer
        + AddPeer(peer p2p.Peer) 
        + RemovePeer(peer p2p.Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 
        + SetEventBus(b *types.EventBus) 
        + FastSync() bool
        + String() string
        + StringIndented(indent string) string

    }
    class State << (S,Aquamarine) >> {
        - config *config.ConsensusConfig
        - privValidator types.PrivValidator
        - blockStore state.BlockStore
        - blockExec *state.BlockExecutor
        - txNotifier txNotifier
        - evpool evidencePool
        - mtx sync.RWMutex
        - state state.State
        - peerMsgQueue <font color=blue>chan</font> msgInfo
        - internalMsgQueue <font color=blue>chan</font> msgInfo
        - timeoutTicker TimeoutTicker
        - statsMsgQueue <font color=blue>chan</font> msgInfo
        - eventBus *types.EventBus
        - wal WAL
        - replayMode bool
        - doWALCatchup bool
        - nSteps int
        - decideProposal <font color=blue>func</font>(int64, int) 
        - doPrevote <font color=blue>func</font>(int64, int) 
        - setProposal <font color=blue>func</font>(*types.Proposal) error
        - done <font color=blue>chan</font> <font color=blue>struct</font>{}
        - evsw events.EventSwitch
        - metrics *Metrics

        - readReplayMessage(msg *TimedWALMessage, newStepSub types.Subscription) error
        - catchupReplay(csHeight int64) error
        - startForReplay() 
        - startRoutines(maxSteps int) 
        - updateHeight(height int64) 
        - updateRoundStep(round int, step types.RoundStepType) 
        - scheduleRound0(rs *types.RoundState) 
        - scheduleTimeout(duration time.Duration, height int64, round int, step types.RoundStepType) 
        - sendInternalMessage(mi msgInfo) 
        - reconstructLastCommit(state state.State) 
        - updateToState(state state.State) 
        - newStep() 
        - receiveRoutine(maxSteps int) 
        - handleMsg(mi msgInfo) 
        - handleTimeout(ti timeoutInfo, rs types.RoundState) 
        - handleTxsAvailable() 
        - enterNewRound(height int64, round int) 
        - needProofBlock(height int64) bool
        - enterPropose(height int64, round int) 
        - isProposer(address []byte) bool
        - defaultDecideProposal(height int64, round int) 
        - isProposalComplete() bool
        - createProposalBlock() (*types.Block, *types.PartSet)
        - enterPrevote(height int64, round int) 
        - defaultDoPrevote(height int64, round int) 
        - enterPrevoteWait(height int64, round int) 
        - enterPrecommit(height int64, round int) 
        - enterPrecommitWait(height int64, round int) 
        - enterCommit(height int64, commitRound int) 
        - tryFinalizeCommit(height int64) 
        - finalizeCommit(height int64) 
        - recordMetrics(height int64, block *types.Block) 
        - defaultSetProposal(proposal *types.Proposal) error
        - addProposalBlockPart(msg *BlockPartMessage, peerID p2p.ID) (bool, error)
        - tryAddVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        - addVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        - signVote(msgType types.SignedMsgType, hash []byte, header types.PartSetHeader) (*types.Vote, error)
        - voteTime() time.Time
        - signAddVote(msgType types.SignedMsgType, hash []byte, header types.PartSetHeader) *types.Vote

        + ReplayFile(file string, console bool) error
        + SetLogger(l log.Logger) 
        + SetEventBus(b *types.EventBus) 
        + String() string
        + GetState() state.State
        + GetLastHeight() int64
        + GetRoundState() *types.RoundState
        + GetRoundStateJSON() ([]byte, error)
        + GetRoundStateSimpleJSON() ([]byte, error)
        + GetValidators() (int64, []*types.Validator)
        + SetPrivValidator(priv types.PrivValidator) 
        + SetTimeoutTicker(timeoutTicker TimeoutTicker) 
        + LoadCommit(height int64) *types.Commit
        + OnStart() error
        + OnStop() 
        + Wait() 
        + OpenWAL(walFile string) (WAL, error)
        + AddVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        + SetProposal(proposal *types.Proposal, peerID p2p.ID) error
        + AddProposalBlockPart(height int64, round int, part *types.Part, peerID p2p.ID) error
        + SetProposalAndBlock(proposal *types.Proposal, block *types.Block, parts *types.PartSet, peerID p2p.ID) error

    }
    interface TimeoutTicker  {
        + Start() error
        + Stop() error
        + Chan() <font color=blue>chan</font> timeoutInfo
        + ScheduleTimeout(ti timeoutInfo) 
        + SetLogger( log.Logger) 

    }
    class timeoutTicker << (S,Aquamarine) >> {
        - timer *time.Timer
        - tickChan <font color=blue>chan</font> timeoutInfo
        - tockChan <font color=blue>chan</font> timeoutInfo

        - stopTimer() 
        - timeoutRoutine() 

        + OnStart() error
        + OnStop() 
        + Chan() <font color=blue>chan</font> timeoutInfo
        + ScheduleTimeout(ti timeoutInfo) 

    }
}
"p2p.BaseReactor" *- - "consensus.Reactor"
"service.BaseService" *- - "consensus.State"
"service.BaseService" *- - "consensus.timeoutTicker"

"consensus.TimeoutTicker" <|- - "consensus.timeoutTicker"

"consensus.State" <.. "conS" "consensus.Reactor"
"consensus.timeoutTicker" <.. "timeoutTicker" "consensus.State"

namespace p2p {
    class BaseReactor << (S,Aquamarine) >> {
        + Switch *Switch

        + SetSwitch(sw *Switch)
        + GetChannels() []*conn.ChannelDescriptor
        + AddPeer(peer Peer)
        + RemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        + Receive(chID byte, peer Peer, msgBytes []byte)
        + InitPeer(peer Peer) Peer

    }
    interface IPeerSet  {
        + Has(key ID) bool
        + HasIP(ip net.IP) bool
        + Get(key ID) Peer
        + List() []Peer
        + Size() int

    }
    class MultiplexTransport << (S,Aquamarine) >> {
        - netAddr NetAddress
        - listener net.Listener
        - maxIncomingConnections int
        - acceptc <font color=blue>chan</font> accept
        - closec <font color=blue>chan</font> <font color=blue>struct</font>{}
        - conns ConnSet
        - connFilters []ConnFilterFunc
        - dialTimeout time.Duration
        - filterTimeout time.Duration
        - handshakeTimeout time.Duration
        - nodeInfo NodeInfo
        - nodeKey NodeKey
        - resolver IPResolver
        - mConfig conn.MConnConfig

        - acceptPeers()
        - cleanup(c net.Conn) error
        - filterConn(c net.Conn) error
        - upgrade(c net.Conn, dialedAddr *NetAddress) (....)
        - wrapPeer(c net.Conn, ni NodeInfo, ....) Peer

        + NetAddress() NetAddress
        + Accept(cfg peerConfig) (Peer, error)
        + Dial(addr NetAddress, cfg peerConfig) (Peer, error)
        + Close() error
        + Listen(addr NetAddress) error
        + Cleanup(p Peer)

    }
    interface Peer  {
        + FlushStop()
        + ID() ID
        + RemoteIP() net.IP
        + RemoteAddr() net.Addr
        + IsOutbound() bool
        + IsPersistent() bool
        + CloseConn() error
        + NodeInfo() NodeInfo
        + Status() conn.ConnectionStatus
        + SocketAddr() *NetAddress
        + Send( byte,  []byte) bool
        + TrySend( byte,  []byte) bool
        + Set( string,  <font color=blue>interface</font>{})
        + Get( string) <font color=blue>interface</font>{}

    }
    class PeerSet << (S,Aquamarine) >> {
        - mtx sync.Mutex
        - lookup <font color=blue>map</font>[ID]*peerSetItem
        - list []Peer

        - hasIP(peerIP net.IP) bool

        + Add(peer Peer) error
        + Has(peerKey ID) bool
        + HasIP(peerIP net.IP) bool
        + Get(peerKey ID) Peer
        + Remove(peer Peer) bool
        + Size() int
        + List() []Peer

    }
    interface Reactor  {
        + SetSwitch( *Switch)
        + GetChannels() []*conn.ChannelDescriptor
        + InitPeer(peer Peer) Peer
        + AddPeer(peer Peer)
        + RemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        + Receive(chID byte, peer Peer, msgBytes []byte)

    }
    class Switch << (S,Aquamarine) >> {
        - config *config.P2PConfig
        - reactors <font color=blue>map</font>[string]Reactor
        - chDescs []*conn.ChannelDescriptor
        - reactorsByCh <font color=blue>map</font>[byte]Reactor
        - peers *PeerSet
        - dialing *cmap.CMap
        - reconnecting *cmap.CMap
        - nodeInfo NodeInfo
        - nodeKey *NodeKey
        - addrBook AddrBook
        - persistentPeersAddrs []*NetAddress
        - unconditionalPeerIDs <font color=blue>map</font>[ID]<font color=blue>struct</font>{}
        - transport Transport
        - filterTimeout time.Duration
        - peerFilters []PeerFilterFunc
        - rng *rand.Rand
        - metrics *Metrics

        - stopAndRemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        - reconnectToPeer(addr *NetAddress)
        - dialPeersAsync(netAddrs []*NetAddress)
        - randomSleep(interval time.Duration)
        - acceptRoutine()
        - addOutboundPeerWithConfig(addr *NetAddress, cfg *config.P2PConfig) error
        - filterPeer(p Peer) error
        - addPeer(p Peer) error
        - addPeerWithConnection(conn net.Conn) error

        + NetAddress() *NetAddress
        + AddReactor(name string, reactor Reactor) Reactor
        + RemoveReactor(name string, reactor Reactor)
        + Reactors() <font color=blue>map</font>[string]Reactor
        + Reactor(name string) Reactor
        + SetNodeInfo(nodeInfo NodeInfo)
        + NodeInfo() NodeInfo
        + SetNodeKey(nodeKey *NodeKey)
        + OnStart() error
        + OnStop()
        + Broadcast(chID byte, msgBytes []byte) <font color=blue>chan</font> bool
        + NumPeers() int
        + IsPeerUnconditional(id ID) bool
        + MaxNumOutboundPeers() int
        + Peers() IPeerSet
        + StopPeerForError(peer Peer, reason <font color=blue>interface</font>{})
        + StopPeerGracefully(peer Peer)
        + SetAddrBook(addrBook AddrBook)
        + MarkPeerAsGood(peer Peer)
        + DialPeersAsync(peers []string) error
        + DialPeerWithAddress(addr *NetAddress) error
        + IsDialingOrExistingAddress(addr *NetAddress) bool
        + AddPersistentPeers(addrs []string) error
        + AddUnconditionalPeerIDs(ids []string) error
        + IsPeerPersistent(na *NetAddress) bool

    }
    interface Transport  {
        + NetAddress() NetAddress
        + Accept( peerConfig) (Peer, error)
        + Dial( NetAddress,  peerConfig) (Peer, error)
        + Cleanup( Peer)

    }
    class peer << (S,Aquamarine) >> {
        - mconn *conn.MConnection
        - nodeInfo NodeInfo
        - channels []byte
        - metrics *Metrics
        - metricsTicker *time.Ticker

        + Data *cmap.CMap

        - hasChannel(chID byte) bool
        - metricsReporter()

        + String() string
        + SetLogger(l log.Logger)
        + OnStart() error
        + FlushStop()
        + OnStop()
        + ID() ID
        + IsOutbound() bool
        + IsPersistent() bool
        + NodeInfo() NodeInfo
        + SocketAddr() *NetAddress
        + Status() conn.ConnectionStatus
        + Send(chID byte, msgBytes []byte) bool
        + TrySend(chID byte, msgBytes []byte) bool
        + Get(key string) <font color=blue>interface</font>{}
        + Set(key string, data <font color=blue>interface</font>{})
        + CloseConn() error
        + RemoteAddr() net.Addr
        + CanSend(chID byte) bool

    }
    class peerConn << (S,Aquamarine) >> {
        - outbound bool
        - persistent bool
        - conn net.Conn
        - socketAddr *NetAddress
        - ip net.IP

        + ID() ID
        + RemoteIP() net.IP
        + CloseConn()

    }
    interface transportLifecycle  {
        + Close() error
        + Listen( NetAddress) error

    }
}

namespace pex {
    interface AddrBook  {
        + AddOurAddress( *p2p.NetAddress) 
        + OurAddress( *p2p.NetAddress) bool
        + AddPrivateIDs( []string) 
        + AddAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        + RemoveAddress( *p2p.NetAddress) 
        + HasAddress( *p2p.NetAddress) bool
        + NeedMoreAddrs() bool
        + Empty() bool
        + PickAddress(biasTowardsNewAddrs int) *p2p.NetAddress
        + MarkGood( p2p.ID) 
        + MarkAttempt( *p2p.NetAddress) 
        + MarkBad( *p2p.NetAddress) 
        + IsGood( *p2p.NetAddress) bool
        + GetSelection() []*p2p.NetAddress
        + GetSelectionWithBias(biasTowardsNewAddrs int) []*p2p.NetAddress
        + Size() int
        + Save() 

    }
    class Reactor << (S,Aquamarine) >> {
        - book AddrBook
        - config *ReactorConfig
        - ensurePeersPeriod time.Duration
        - requestsSent *cmap.CMap
        - lastReceivedRequests *cmap.CMap
        - seedAddrs []*p2p.NetAddress
        - attemptsToDial sync.Map
        - crawlPeerInfos <font color=blue>map</font>[p2p.ID]crawlPeerInfo

        - minReceiveRequestInterval() time.Duration
        - logErrAddrBook(err error) 
        - receiveRequest(src Peer) error
        - ensurePeersRoutine() 
        - ensurePeers() 
        - dialAttemptsInfo(addr *p2p.NetAddress) (int, time.Time)
        - dialPeer(addr *p2p.NetAddress) error
        - maxBackoffDurationForPeer(addr *p2p.NetAddress, planned time.Duration) time.Duration
        - checkSeeds() (int, []*p2p.NetAddress, error)
        - dialSeeds() 
        - crawlPeersRoutine() 
        - nodeHasSomePeersOrDialingAny() bool
        - crawlPeers(addrs []*p2p.NetAddress) 
        - cleanupCrawlPeerInfos() 
        - attemptDisconnects() 

        + OnStart() error
        + OnStop() 
        + GetChannels() []*conn.ChannelDescriptor
        + AddPeer(p Peer) 
        + RemovePeer(p Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src Peer, msgBytes []byte) 
        + RequestAddrs(p Peer) 
        + ReceiveAddrs(addrs []*p2p.NetAddress, src Peer) error
        + SendAddrs(p Peer, netAddrs []*p2p.NetAddress) 
        + SetEnsurePeersPeriod(d time.Duration) 
        + AttemptsToDial(addr *p2p.NetAddress) int

    }
    class addrBook << (S,Aquamarine) >> {
        - mtx sync.Mutex
        - rand *rand.Rand
        - ourAddrs <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - privateIDs <font color=blue>map</font>[p2p.ID]<font color=blue>struct</font>{}
        - addrLookup <font color=blue>map</font>[p2p.ID]*knownAddress
        - bucketsOld []<font color=blue>map</font>[string]*knownAddress
        - bucketsNew []<font color=blue>map</font>[string]*knownAddress
        - nOld int
        - nNew int
        - filePath string
        - key string
        - routabilityStrict bool
        - wg sync.WaitGroup

        - init() 
        - size() int
        - saveRoutine() 
        - getBucket(bucketType byte, bucketIdx int) <font color=blue>map</font>[string]*knownAddress
        - addToNewBucket(ka *knownAddress, bucketIdx int) 
        - addToOldBucket(ka *knownAddress, bucketIdx int) bool
        - removeFromBucket(ka *knownAddress, bucketType byte, bucketIdx int) 
        - removeFromAllBuckets(ka *knownAddress) 
        - pickOldest(bucketType byte, bucketIdx int) *knownAddress
        - addAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        - randomPickAddresses(bucketType byte, num int) []*p2p.NetAddress
        - expireNew(bucketIdx int) 
        - moveToOld(ka *knownAddress) 
        - calcNewBucket(addr *p2p.NetAddress, src *p2p.NetAddress) int
        - calcOldBucket(addr *p2p.NetAddress) int
        - groupKey(na *p2p.NetAddress) string
        - saveToFile(filePath string) 
        - loadFromFile(filePath string) bool

        + OnStart() error
        + OnStop() 
        + Wait() 
        + FilePath() string
        + AddOurAddress(addr *p2p.NetAddress) 
        + OurAddress(addr *p2p.NetAddress) bool
        + AddPrivateIDs(ids []string) 
        + AddAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        + RemoveAddress(addr *p2p.NetAddress) 
        + IsGood(addr *p2p.NetAddress) bool
        + HasAddress(addr *p2p.NetAddress) bool
        + NeedMoreAddrs() bool
        + Empty() bool
        + PickAddress(biasTowardsNewAddrs int) *p2p.NetAddress
        + MarkGood(id p2p.ID) 
        + MarkAttempt(addr *p2p.NetAddress) 
        + MarkBad(addr *p2p.NetAddress) 
        + GetSelection() []*p2p.NetAddress
        + GetSelectionWithBias(biasTowardsNewAddrs int) []*p2p.NetAddress
        + Size() int
        + Save() 

    }
}


"p2p.BaseReactor" *- - "pex.Reactor"
"service.BaseService" *- - "pex.addrBook"

"pex.AddrBook" <|- - "pex.addrBook"
"pex.addrBook" <.. "book" "pex.Reactor"

namespace service {
    class BaseService << (S,Aquamarine) >> {
        - name string
        - started uint32
        - stopped uint32
        - quit <font color=blue>chan</font> <font color=blue>struct</font>{}
        - impl Service

        + Logger log.Logger

        + SetLogger(l log.Logger)
        + Start() error
        + OnStart() error
        + Stop() error
        + OnStop()
        + Reset() error
        + OnReset() error
        + IsRunning() bool
        + Wait()
        + String() string
        + Quit() <font color=blue>chan</font> <font color=blue>struct</font>{}

    }
    interface Service  {
        + Start() error
        + OnStart() error
        + Stop() error
        + OnStop()
        + Reset() error
        + OnReset() error
        + IsRunning() bool
        + Quit() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + String() string
        + SetLogger( log.Logger)

    }
}

"service.Service" <|- - "service.BaseService"
"service.BaseService" *- - "p2p.BaseReactor"
"p2p.Reactor" <|- "p2p.BaseReactor"

"p2p.peerConn" *- - "p2p.peer"
"service.BaseService" *- - "p2p.peer"


"p2p.Transport" <|- - "p2p.MultiplexTransport"
"p2p.transportLifecycle" <|- - "p2p.MultiplexTransport"
"p2p.IPeerSet" <|- - "p2p.PeerSet"

"p2p.Peer" <|- - "p2p.peer"

"service.BaseService" *- - "p2p.Switch"
"p2p.BaseReactor" <.down. "reactors" "p2p.Switch"
"p2p.PeerSet" <.. "peers" "p2p.Switch"
"p2p.MultiplexTransport" <. "transport" "p2p.Switch"

 "p2p.Switch" <.. "Switch" "p2p.BaseReactor"

"p2p.peer" <.. "list" "p2p.PeerSet"

hide methods
hide members
@enduml

PlantUML version 1.2019.13(Wed Dec 11 01:18:29 CST 2019)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 13.0.1+9
Operating System: Mac OS X
Default Encoding: UTF-8
Language: en
Country: CN
--></g></svg>