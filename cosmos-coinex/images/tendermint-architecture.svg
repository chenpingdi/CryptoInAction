<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="701px" preserveAspectRatio="none" style="width:1701px;height:701px;" version="1.1" viewBox="0 0 1701 701" width="1701px" zoomAndPan="magnify"><defs><filter height="300%" id="f17x5gu7ccmdp2" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[57060994c107fb965801a5c218b12e41]
cluster evidence--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="22,422,90,422,97,444.4883,130,444.4883,130,689,22,689,22,422" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="97" y1="444.4883" y2="444.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="62" x="26" y="437.5352">evidence</text><!--MD5=[fa03aa15696d8de1fc436cb9f6abb39b]
cluster p2p--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="322,131,355,131,362,153.4883,834,153.4883,834,597,322,597,322,131" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="322" x2="362" y1="153.4883" y2="153.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="27" x="326" y="146.5352">p2p</text><!--MD5=[6ff94cd2fd350ff2b867955d3269a227]
cluster mempool--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="154,422,228,422,235,444.4883,298,444.4883,298,689,154,689,154,422" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="235" y1="444.4883" y2="444.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="158" y="437.5352">mempool</text><!--MD5=[3bde983dd405bd6d1b3da471b606eade]
cluster consensus--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="979,330,1060,330,1067,352.4883,1127,352.4883,1127,689,979,689,979,330" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="979" x2="1067" y1="352.4883" y2="352.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="75" x="983" y="345.5352">consensus</text><!--MD5=[7579d5565d2521d5936cec86ed3dadee]
cluster service--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="1098,24,1154,24,1161,46.4883,1230,46.4883,1230,214,1098,214,1098,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1098" x2="1161" y1="46.4883" y2="46.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="1102" y="39.5352">service</text><!--MD5=[0db76f708cbe7270eddf2974bb114691]
cluster pex--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="1343,422,1374,422,1381,444.4883,1465,444.4883,1465,689,1343,689,1343,422" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1343" x2="1381" y1="444.4883" y2="444.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="1347" y="437.5352">pex</text><!--MD5=[15762fc0c6a0c1094f6fb2338076f869]
cluster blockchain--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="1511,422,1594,422,1601,444.4883,1679,444.4883,1679,689,1511,689,1511,422" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1511" x2="1601" y1="444.4883" y2="444.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="77" x="1515" y="437.5352">blockchain</text><!--MD5=[52096ddeefb377140b702f047c765a55]
cluster conn--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="128,24,168,24,175,46.4883,298,46.4883,298,306,128,306,128,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="128" x2="175" y1="46.4883" y2="46.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="34" x="132" y="39.5352">conn</text><!--MD5=[c59a16d3fcadadefd9f8a8868b25a4e7]
cluster net--><polygon fill="#FFFFFF" filter="url(#f17x5gu7ccmdp2)" points="332,24,361,24,368,46.4883,426,46.4883,426,107,332,107,332,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="332" x2="368" y1="46.4883" y2="46.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="23" x="336" y="39.5352">net</text><!--MD5=[324c2a1af344348a0a36e8d180b695fc]
class evidence.Pool--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="evidence.Pool" style="stroke: #A80036; stroke-width: 1.5;" width="56" x="48" y="549"/><ellipse cx="63" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M62.2334,566.063 Q60.3823,565.3574 59.7266,564.5813 Q59.0708,563.8052 59.0708,562.4937 Q59.0708,560.8086 60.1499,559.8457 Q61.229,558.8828 63.1133,558.8828 Q63.9683,558.8828 64.8232,559.0779 Q65.6782,559.2729 66.5166,559.6548 L66.5166,562.0454 Q65.728,561.4893 64.9146,561.1987 Q64.1011,560.9082 63.3042,560.9082 Q62.416,560.9082 61.9429,561.2651 Q61.4697,561.6221 61.4697,562.2861 Q61.4697,562.8008 61.8142,563.137 Q62.1587,563.4731 63.2544,563.8799 L64.3086,564.2783 Q65.8027,564.8262 66.5083,565.731 Q67.2139,566.6357 67.2139,568.0137 Q67.2139,569.8896 66.1057,570.8152 Q64.9976,571.7407 62.7563,571.7407 Q61.835,571.7407 60.9094,571.5208 Q59.9839,571.3008 59.1206,570.8691 L59.1206,568.3374 Q60.1001,569.0347 61.0173,569.375 Q61.9346,569.7153 62.8311,569.7153 Q63.7358,569.7153 64.2339,569.3044 Q64.7319,568.8936 64.7319,568.1548 Q64.7319,567.5986 64.3999,567.1794 Q64.0679,566.7603 63.437,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="24" x="77" y="569.5352">Pool</text><!--MD5=[0b6f60b296f79805b593c05f25025429]
class evidence.Reactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="evidence.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="38" y="641"/><ellipse cx="53" cy="657" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M52.2334,658.063 Q50.3823,657.3574 49.7266,656.5813 Q49.0708,655.8052 49.0708,654.4937 Q49.0708,652.8086 50.1499,651.8457 Q51.229,650.8828 53.1133,650.8828 Q53.9683,650.8828 54.8232,651.0779 Q55.6782,651.2729 56.5166,651.6548 L56.5166,654.0454 Q55.728,653.4893 54.9146,653.1987 Q54.1011,652.9082 53.3042,652.9082 Q52.416,652.9082 51.9429,653.2651 Q51.4697,653.6221 51.4697,654.2861 Q51.4697,654.8008 51.8142,655.137 Q52.1587,655.4731 53.2544,655.8799 L54.3086,656.2783 Q55.8027,656.8262 56.5083,657.731 Q57.2139,658.6357 57.2139,660.0137 Q57.2139,661.8896 56.1057,662.8152 Q54.9976,663.7407 52.7563,663.7407 Q51.835,663.7407 50.9094,663.5208 Q49.9839,663.3008 49.1206,662.8691 L49.1206,660.3374 Q50.1001,661.0347 51.0173,661.375 Q51.9346,661.7153 52.8311,661.7153 Q53.7358,661.7153 54.2339,661.3044 Q54.7319,660.8936 54.7319,660.1548 Q54.7319,659.5986 54.3999,659.1794 Q54.0679,658.7603 53.437,658.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="67" y="661.5352">Reactor</text><!--MD5=[3cf3bf47bb1cece4e9f32b20193c2c79]
class evidence.Store--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="evidence.Store" style="stroke: #A80036; stroke-width: 1.5;" width="61" x="45.5" y="457"/><ellipse cx="60.5" cy="473" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M59.7334,474.063 Q57.8823,473.3574 57.2266,472.5813 Q56.5708,471.8052 56.5708,470.4937 Q56.5708,468.8086 57.6499,467.8457 Q58.729,466.8828 60.6133,466.8828 Q61.4683,466.8828 62.3232,467.0779 Q63.1782,467.2729 64.0166,467.6548 L64.0166,470.0454 Q63.228,469.4893 62.4146,469.1987 Q61.6011,468.9082 60.8042,468.9082 Q59.916,468.9082 59.4429,469.2651 Q58.9697,469.6221 58.9697,470.2861 Q58.9697,470.8008 59.3142,471.137 Q59.6587,471.4731 60.7544,471.8799 L61.8086,472.2783 Q63.3027,472.8262 64.0083,473.731 Q64.7139,474.6357 64.7139,476.0137 Q64.7139,477.8896 63.6057,478.8152 Q62.4976,479.7407 60.2563,479.7407 Q59.335,479.7407 58.4094,479.5208 Q57.4839,479.3008 56.6206,478.8691 L56.6206,476.3374 Q57.6001,477.0347 58.5173,477.375 Q59.4346,477.7153 60.3311,477.7153 Q61.2358,477.7153 61.7339,477.3044 Q62.2319,476.8936 62.2319,476.1548 Q62.2319,475.5986 61.8999,475.1794 Q61.5679,474.7603 60.937,474.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="74.5" y="477.5352">Store</text><!--MD5=[311699931f27d41b8a110d6bfb3b1517]
class p2p.BaseReactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.5;" width="103" x="714.5" y="549"/><ellipse cx="729.5" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M728.7334,566.063 Q726.8823,565.3574 726.2266,564.5813 Q725.5708,563.8052 725.5708,562.4937 Q725.5708,560.8086 726.6499,559.8457 Q727.729,558.8828 729.6133,558.8828 Q730.4683,558.8828 731.3232,559.0779 Q732.1782,559.2729 733.0166,559.6548 L733.0166,562.0454 Q732.228,561.4893 731.4146,561.1987 Q730.6011,560.9082 729.8042,560.9082 Q728.916,560.9082 728.4429,561.2651 Q727.9697,561.6221 727.9697,562.2861 Q727.9697,562.8008 728.3142,563.137 Q728.6587,563.4731 729.7544,563.8799 L730.8086,564.2783 Q732.3027,564.8262 733.0083,565.731 Q733.7139,566.6357 733.7139,568.0137 Q733.7139,569.8896 732.6057,570.8152 Q731.4976,571.7407 729.2563,571.7407 Q728.335,571.7407 727.4094,571.5208 Q726.4839,571.3008 725.6206,570.8691 L725.6206,568.3374 Q726.6001,569.0347 727.5173,569.375 Q728.4346,569.7153 729.3311,569.7153 Q730.2358,569.7153 730.7339,569.3044 Q731.2319,568.8936 731.2319,568.1548 Q731.2319,567.5986 730.8999,567.1794 Q730.5679,566.7603 729.937,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="743.5" y="569.5352">BaseReactor</text><!--MD5=[9fb5b8a8bddc32b7b1ff318042f2b338]
class p2p.IPeerSet--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.IPeerSet" style="stroke: #A80036; stroke-width: 1.5;" width="78" x="740" y="258"/><ellipse cx="755" cy="274" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M751.4277,270.2651 L751.4277,268.1069 L758.8071,268.1069 L758.8071,270.2651 L756.3418,270.2651 L756.3418,278.3418 L758.8071,278.3418 L758.8071,280.5 L751.4277,280.5 L751.4277,278.3418 L753.8931,278.3418 L753.8931,270.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="769" y="278.5352">IPeerSet</text><!--MD5=[53e5f75d9eb4a4b76da8301e97156229]
class p2p.MultiplexTransport--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.5;" width="141" x="493.5" y="457"/><ellipse cx="508.5" cy="473" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M507.7334,474.063 Q505.8823,473.3574 505.2266,472.5813 Q504.5708,471.8052 504.5708,470.4937 Q504.5708,468.8086 505.6499,467.8457 Q506.729,466.8828 508.6133,466.8828 Q509.4683,466.8828 510.3232,467.0779 Q511.1782,467.2729 512.0166,467.6548 L512.0166,470.0454 Q511.228,469.4893 510.4146,469.1987 Q509.6011,468.9082 508.8042,468.9082 Q507.916,468.9082 507.4429,469.2651 Q506.9697,469.6221 506.9697,470.2861 Q506.9697,470.8008 507.3142,471.137 Q507.6587,471.4731 508.7544,471.8799 L509.8086,472.2783 Q511.3027,472.8262 512.0083,473.731 Q512.7139,474.6357 512.7139,476.0137 Q512.7139,477.8896 511.6057,478.8152 Q510.4976,479.7407 508.2563,479.7407 Q507.335,479.7407 506.4094,479.5208 Q505.4839,479.3008 504.6206,478.8691 L504.6206,476.3374 Q505.6001,477.0347 506.5173,477.375 Q507.4346,477.7153 508.3311,477.7153 Q509.2358,477.7153 509.7339,477.3044 Q510.2319,476.8936 510.2319,476.1548 Q510.2319,475.5986 509.8999,475.1794 Q509.5679,474.7603 508.937,474.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="522.5" y="477.5352">MultiplexTransport</text><!--MD5=[e3e52a252a583c20fdaae9f735fd57de]
class p2p.Peer--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.Peer" style="stroke: #A80036; stroke-width: 1.5;" width="58" x="617" y="166"/><ellipse cx="632" cy="182" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M628.4277,178.2651 L628.4277,176.1069 L635.8071,176.1069 L635.8071,178.2651 L633.3418,178.2651 L633.3418,186.3418 L635.8071,186.3418 L635.8071,188.5 L628.4277,188.5 L628.4277,186.3418 L630.8931,186.3418 L630.8931,178.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="26" x="646" y="186.5352">Peer</text><!--MD5=[573edd832eea7a8264afd9f9040bf970]
class p2p.PeerSet--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.5;" width="75" x="742.5" y="365"/><ellipse cx="757.5" cy="381" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M756.7334,382.063 Q754.8823,381.3574 754.2266,380.5813 Q753.5708,379.8052 753.5708,378.4937 Q753.5708,376.8086 754.6499,375.8457 Q755.729,374.8828 757.6133,374.8828 Q758.4683,374.8828 759.3232,375.0779 Q760.1782,375.2729 761.0166,375.6548 L761.0166,378.0454 Q760.228,377.4893 759.4146,377.1987 Q758.6011,376.9082 757.8042,376.9082 Q756.916,376.9082 756.4429,377.2651 Q755.9697,377.6221 755.9697,378.2861 Q755.9697,378.8008 756.3142,379.137 Q756.6587,379.4731 757.7544,379.8799 L758.8086,380.2783 Q760.3027,380.8262 761.0083,381.731 Q761.7139,382.6357 761.7139,384.0137 Q761.7139,385.8896 760.6057,386.8152 Q759.4976,387.7407 757.2563,387.7407 Q756.335,387.7407 755.4094,387.5208 Q754.4839,387.3008 753.6206,386.8691 L753.6206,384.3374 Q754.6001,385.0347 755.5173,385.375 Q756.4346,385.7153 757.3311,385.7153 Q758.2358,385.7153 758.7339,385.3044 Q759.2319,384.8936 759.2319,384.1548 Q759.2319,383.5986 758.8999,383.1794 Q758.5679,382.7603 757.937,382.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="771.5" y="385.5352">PeerSet</text><!--MD5=[37628d08395bda41cda4b3616adc29df]
class p2p.Reactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="603" y="549"/><ellipse cx="618" cy="565" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M614.4277,561.2651 L614.4277,559.1069 L621.8071,559.1069 L621.8071,561.2651 L619.3418,561.2651 L619.3418,569.3418 L621.8071,569.3418 L621.8071,571.5 L614.4277,571.5 L614.4277,569.3418 L616.8931,569.3418 L616.8931,561.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="44" x="632" y="569.5352">Reactor</text><!--MD5=[b34240524190d792e7d8883f18bd4dc7]
class p2p.Switch--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.Switch" style="stroke: #A80036; stroke-width: 1.5;" width="67" x="732.5" y="457"/><ellipse cx="747.5" cy="473" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M746.7334,474.063 Q744.8823,473.3574 744.2266,472.5813 Q743.5708,471.8052 743.5708,470.4937 Q743.5708,468.8086 744.6499,467.8457 Q745.729,466.8828 747.6133,466.8828 Q748.4683,466.8828 749.3232,467.0779 Q750.1782,467.2729 751.0166,467.6548 L751.0166,470.0454 Q750.228,469.4893 749.4146,469.1987 Q748.6011,468.9082 747.8042,468.9082 Q746.916,468.9082 746.4429,469.2651 Q745.9697,469.6221 745.9697,470.2861 Q745.9697,470.8008 746.3142,471.137 Q746.6587,471.4731 747.7544,471.8799 L748.8086,472.2783 Q750.3027,472.8262 751.0083,473.731 Q751.7139,474.6357 751.7139,476.0137 Q751.7139,477.8896 750.6057,478.8152 Q749.4976,479.7407 747.2563,479.7407 Q746.335,479.7407 745.4094,479.5208 Q744.4839,479.3008 743.6206,478.8691 L743.6206,476.3374 Q744.6001,477.0347 745.5173,477.375 Q746.4346,477.7153 747.3311,477.7153 Q748.2358,477.7153 748.7339,477.3044 Q749.2319,476.8936 749.2319,476.1548 Q749.2319,475.5986 748.8999,475.1794 Q748.5679,474.7603 747.937,474.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="761.5" y="477.5352">Switch</text><!--MD5=[18cff6f764bb194711d9f5dd93f9c958]
class p2p.Transport--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.Transport" style="stroke: #A80036; stroke-width: 1.5;" width="89" x="338.5" y="365"/><ellipse cx="353.5" cy="381" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M349.9277,377.2651 L349.9277,375.1069 L357.3071,375.1069 L357.3071,377.2651 L354.8418,377.2651 L354.8418,385.3418 L357.3071,385.3418 L357.3071,387.5 L349.9277,387.5 L349.9277,385.3418 L352.3931,385.3418 L352.3931,377.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="367.5" y="385.5352">Transport</text><!--MD5=[6fef2d861d215382f2c7392a760d324d]
class p2p.peer--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.peer" style="stroke: #A80036; stroke-width: 1.5;" width="59" x="616.5" y="258"/><ellipse cx="631.5" cy="274" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M630.7334,275.063 Q628.8823,274.3574 628.2266,273.5813 Q627.5708,272.8052 627.5708,271.4937 Q627.5708,269.8086 628.6499,268.8457 Q629.729,267.8828 631.6133,267.8828 Q632.4683,267.8828 633.3232,268.0779 Q634.1782,268.2729 635.0166,268.6548 L635.0166,271.0454 Q634.228,270.4893 633.4146,270.1987 Q632.6011,269.9082 631.8042,269.9082 Q630.916,269.9082 630.4429,270.2651 Q629.9697,270.6221 629.9697,271.2861 Q629.9697,271.8008 630.3142,272.137 Q630.6587,272.4731 631.7544,272.8799 L632.8086,273.2783 Q634.3027,273.8262 635.0083,274.731 Q635.7139,275.6357 635.7139,277.0137 Q635.7139,278.8896 634.6057,279.8152 Q633.4976,280.7407 631.2563,280.7407 Q630.335,280.7407 629.4094,280.5208 Q628.4839,280.3008 627.6206,279.8691 L627.6206,277.3374 Q628.6001,278.0347 629.5173,278.375 Q630.4346,278.7153 631.3311,278.7153 Q632.2358,278.7153 632.7339,278.3044 Q633.2319,277.8936 633.2319,277.1548 Q633.2319,276.5986 632.8999,276.1794 Q632.5679,275.7603 631.937,275.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="27" x="645.5" y="278.5352">peer</text><!--MD5=[f2ba958c56ea10e04681f7ec6c9a06ea]
class p2p.peerConn--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.peerConn" style="stroke: #A80036; stroke-width: 1.5;" width="88" x="477" y="166"/><ellipse cx="492" cy="182" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M491.2334,183.063 Q489.3823,182.3574 488.7266,181.5813 Q488.0708,180.8052 488.0708,179.4937 Q488.0708,177.8086 489.1499,176.8457 Q490.229,175.8828 492.1133,175.8828 Q492.9683,175.8828 493.8232,176.0779 Q494.6782,176.2729 495.5166,176.6548 L495.5166,179.0454 Q494.728,178.4893 493.9146,178.1987 Q493.1011,177.9082 492.3042,177.9082 Q491.416,177.9082 490.9429,178.2651 Q490.4697,178.6221 490.4697,179.2861 Q490.4697,179.8008 490.8142,180.137 Q491.1587,180.4731 492.2544,180.8799 L493.3086,181.2783 Q494.8027,181.8262 495.5083,182.731 Q496.2139,183.6357 496.2139,185.0137 Q496.2139,186.8896 495.1057,187.8152 Q493.9976,188.7407 491.7563,188.7407 Q490.835,188.7407 489.9094,188.5208 Q488.9839,188.3008 488.1206,187.8691 L488.1206,185.3374 Q489.1001,186.0347 490.0173,186.375 Q490.9346,186.7153 491.8311,186.7153 Q492.7358,186.7153 493.2339,186.3044 Q493.7319,185.8936 493.7319,185.1548 Q493.7319,184.5986 493.3999,184.1794 Q493.0679,183.7603 492.437,183.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="506" y="186.5352">peerConn</text><!--MD5=[c22516aed28ee4c58d2db0be50dce8ef]
class p2p.transportLifecycle--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.transportLifecycle" style="stroke: #A80036; stroke-width: 1.5;" width="133" x="574.5" y="365"/><ellipse cx="589.5" cy="381" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M585.9277,377.2651 L585.9277,375.1069 L593.3071,375.1069 L593.3071,377.2651 L590.8418,377.2651 L590.8418,385.3418 L593.3071,385.3418 L593.3071,387.5 L585.9277,387.5 L585.9277,385.3418 L588.3931,385.3418 L588.3931,377.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="603.5" y="385.5352">transportLifecycle</text><!--MD5=[48cb090cdb247cbc8abf3a8cb8b11423]
class p2p.ConnSet--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.ConnSet" style="stroke: #A80036; stroke-width: 1.5;" width="78" x="475" y="258"/><ellipse cx="490" cy="274" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M486.4277,270.2651 L486.4277,268.1069 L493.8071,268.1069 L493.8071,270.2651 L491.3418,270.2651 L491.3418,278.3418 L493.8071,278.3418 L493.8071,280.5 L486.4277,280.5 L486.4277,278.3418 L488.8931,278.3418 L488.8931,270.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="504" y="278.5352">ConnSet</text><!--MD5=[6b82c73672e41dc858a5b85c68dd7260]
class p2p.connSet--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.connSet" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="463" y="365"/><ellipse cx="478" cy="381" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M477.2334,382.063 Q475.3823,381.3574 474.7266,380.5813 Q474.0708,379.8052 474.0708,378.4937 Q474.0708,376.8086 475.1499,375.8457 Q476.229,374.8828 478.1133,374.8828 Q478.9683,374.8828 479.8232,375.0779 Q480.6782,375.2729 481.5166,375.6548 L481.5166,378.0454 Q480.728,377.4893 479.9146,377.1987 Q479.1011,376.9082 478.3042,376.9082 Q477.416,376.9082 476.9429,377.2651 Q476.4697,377.6221 476.4697,378.2861 Q476.4697,378.8008 476.8142,379.137 Q477.1587,379.4731 478.2544,379.8799 L479.3086,380.2783 Q480.8027,380.8262 481.5083,381.731 Q482.2139,382.6357 482.2139,384.0137 Q482.2139,385.8896 481.1057,386.8152 Q479.9976,387.7407 477.7563,387.7407 Q476.835,387.7407 475.9094,387.5208 Q474.9839,387.3008 474.1206,386.8691 L474.1206,384.3374 Q475.1001,385.0347 476.0173,385.375 Q476.9346,385.7153 477.8311,385.7153 Q478.7358,385.7153 479.2339,385.3044 Q479.7319,384.8936 479.7319,384.1548 Q479.7319,383.5986 479.3999,383.1794 Q479.0679,382.7603 478.437,382.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="492" y="385.5352">connSet</text><!--MD5=[22e0396bef899c84f2dfb543afea9b77]
class p2p.connSetItem--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="p2p.connSetItem" style="stroke: #A80036; stroke-width: 1.5;" width="101" x="338.5" y="258"/><ellipse cx="353.5" cy="274" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M352.7334,275.063 Q350.8823,274.3574 350.2266,273.5813 Q349.5708,272.8052 349.5708,271.4937 Q349.5708,269.8086 350.6499,268.8457 Q351.729,267.8828 353.6133,267.8828 Q354.4683,267.8828 355.3232,268.0779 Q356.1782,268.2729 357.0166,268.6548 L357.0166,271.0454 Q356.228,270.4893 355.4146,270.1987 Q354.6011,269.9082 353.8042,269.9082 Q352.916,269.9082 352.4429,270.2651 Q351.9697,270.6221 351.9697,271.2861 Q351.9697,271.8008 352.3142,272.137 Q352.6587,272.4731 353.7544,272.8799 L354.8086,273.2783 Q356.3027,273.8262 357.0083,274.731 Q357.7139,275.6357 357.7139,277.0137 Q357.7139,278.8896 356.6057,279.8152 Q355.4976,280.7407 353.2563,280.7407 Q352.335,280.7407 351.4094,280.5208 Q350.4839,280.3008 349.6206,279.8691 L349.6206,277.3374 Q350.6001,278.0347 351.5173,278.375 Q352.4346,278.7153 353.3311,278.7153 Q354.2358,278.7153 354.7339,278.3044 Q355.2319,277.8936 355.2319,277.1548 Q355.2319,276.5986 354.8999,276.1794 Q354.5679,275.7603 353.937,275.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="367.5" y="278.5352">connSetItem</text><!--MD5=[0d02e3e0fbf54d9506c3b34b685878a1]
class mempool.CListMempool--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="mempool.CListMempool" style="stroke: #A80036; stroke-width: 1.5;" width="112" x="170" y="549"/><ellipse cx="185" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M184.2334,566.063 Q182.3823,565.3574 181.7266,564.5813 Q181.0708,563.8052 181.0708,562.4937 Q181.0708,560.8086 182.1499,559.8457 Q183.229,558.8828 185.1133,558.8828 Q185.9683,558.8828 186.8232,559.0779 Q187.6782,559.2729 188.5166,559.6548 L188.5166,562.0454 Q187.728,561.4893 186.9146,561.1987 Q186.1011,560.9082 185.3042,560.9082 Q184.416,560.9082 183.9429,561.2651 Q183.4697,561.6221 183.4697,562.2861 Q183.4697,562.8008 183.8142,563.137 Q184.1587,563.4731 185.2544,563.8799 L186.3086,564.2783 Q187.8027,564.8262 188.5083,565.731 Q189.2139,566.6357 189.2139,568.0137 Q189.2139,569.8896 188.1057,570.8152 Q186.9976,571.7407 184.7563,571.7407 Q183.835,571.7407 182.9094,571.5208 Q181.9839,571.3008 181.1206,570.8691 L181.1206,568.3374 Q182.1001,569.0347 183.0173,569.375 Q183.9346,569.7153 184.8311,569.7153 Q185.7358,569.7153 186.2339,569.3044 Q186.7319,568.8936 186.7319,568.1548 Q186.7319,567.5986 186.3999,567.1794 Q186.0679,566.7603 185.437,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="199" y="569.5352">CListMempool</text><!--MD5=[827e6d4d689e9192117e9f34d94d7f85]
class mempool.Mempool--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="mempool.Mempool" style="stroke: #A80036; stroke-width: 1.5;" width="85" x="183.5" y="457"/><ellipse cx="198.5" cy="473" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M194.9277,469.2651 L194.9277,467.1069 L202.3071,467.1069 L202.3071,469.2651 L199.8418,469.2651 L199.8418,477.3418 L202.3071,477.3418 L202.3071,479.5 L194.9277,479.5 L194.9277,477.3418 L197.3931,477.3418 L197.3931,469.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="53" x="212.5" y="477.5352">Mempool</text><!--MD5=[5798ab4fec092a19736edce69bd07da2]
class mempool.Reactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="mempool.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="197" y="641"/><ellipse cx="212" cy="657" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M211.2334,658.063 Q209.3823,657.3574 208.7266,656.5813 Q208.0708,655.8052 208.0708,654.4937 Q208.0708,652.8086 209.1499,651.8457 Q210.229,650.8828 212.1133,650.8828 Q212.9683,650.8828 213.8232,651.0779 Q214.6782,651.2729 215.5166,651.6548 L215.5166,654.0454 Q214.728,653.4893 213.9146,653.1987 Q213.1011,652.9082 212.3042,652.9082 Q211.416,652.9082 210.9429,653.2651 Q210.4697,653.6221 210.4697,654.2861 Q210.4697,654.8008 210.8142,655.137 Q211.1587,655.4731 212.2544,655.8799 L213.3086,656.2783 Q214.8027,656.8262 215.5083,657.731 Q216.2139,658.6357 216.2139,660.0137 Q216.2139,661.8896 215.1057,662.8152 Q213.9976,663.7407 211.7563,663.7407 Q210.835,663.7407 209.9094,663.5208 Q208.9839,663.3008 208.1206,662.8691 L208.1206,660.3374 Q209.1001,661.0347 210.0173,661.375 Q210.9346,661.7153 211.8311,661.7153 Q212.7358,661.7153 213.2339,661.3044 Q213.7319,660.8936 213.7319,660.1548 Q213.7319,659.5986 213.3999,659.1794 Q213.0679,658.7603 212.437,658.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="226" y="661.5352">Reactor</text><!--MD5=[afe5de84d5e2fc73341ea0251c5bc27b]
class consensus.Reactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="consensus.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="1006" y="641"/><ellipse cx="1021" cy="657" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1020.2334,658.063 Q1018.3823,657.3574 1017.7266,656.5813 Q1017.0708,655.8052 1017.0708,654.4937 Q1017.0708,652.8086 1018.1499,651.8457 Q1019.229,650.8828 1021.1133,650.8828 Q1021.9683,650.8828 1022.8232,651.0779 Q1023.6782,651.2729 1024.5166,651.6548 L1024.5166,654.0454 Q1023.728,653.4893 1022.9146,653.1987 Q1022.1011,652.9082 1021.3042,652.9082 Q1020.416,652.9082 1019.9429,653.2651 Q1019.4697,653.6221 1019.4697,654.2861 Q1019.4697,654.8008 1019.8142,655.137 Q1020.1587,655.4731 1021.2544,655.8799 L1022.3086,656.2783 Q1023.8027,656.8262 1024.5083,657.731 Q1025.2139,658.6357 1025.2139,660.0137 Q1025.2139,661.8896 1024.1057,662.8152 Q1022.9976,663.7407 1020.7563,663.7407 Q1019.835,663.7407 1018.9094,663.5208 Q1017.9839,663.3008 1017.1206,662.8691 L1017.1206,660.3374 Q1018.1001,661.0347 1019.0173,661.375 Q1019.9346,661.7153 1020.8311,661.7153 Q1021.7358,661.7153 1022.2339,661.3044 Q1022.7319,660.8936 1022.7319,660.1548 Q1022.7319,659.5986 1022.3999,659.1794 Q1022.0679,658.7603 1021.437,658.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="1035" y="661.5352">Reactor</text><!--MD5=[7524d425873270deeeeae269ab4b26d6]
class consensus.State--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="consensus.State" style="stroke: #A80036; stroke-width: 1.5;" width="60" x="1024" y="549"/><ellipse cx="1039" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1038.2334,566.063 Q1036.3823,565.3574 1035.7266,564.5813 Q1035.0708,563.8052 1035.0708,562.4937 Q1035.0708,560.8086 1036.1499,559.8457 Q1037.229,558.8828 1039.1133,558.8828 Q1039.9683,558.8828 1040.8232,559.0779 Q1041.6782,559.2729 1042.5166,559.6548 L1042.5166,562.0454 Q1041.728,561.4893 1040.9146,561.1987 Q1040.1011,560.9082 1039.3042,560.9082 Q1038.416,560.9082 1037.9429,561.2651 Q1037.4697,561.6221 1037.4697,562.2861 Q1037.4697,562.8008 1037.8142,563.137 Q1038.1587,563.4731 1039.2544,563.8799 L1040.3086,564.2783 Q1041.8027,564.8262 1042.5083,565.731 Q1043.2139,566.6357 1043.2139,568.0137 Q1043.2139,569.8896 1042.1057,570.8152 Q1040.9976,571.7407 1038.7563,571.7407 Q1037.835,571.7407 1036.9094,571.5208 Q1035.9839,571.3008 1035.1206,570.8691 L1035.1206,568.3374 Q1036.1001,569.0347 1037.0173,569.375 Q1037.9346,569.7153 1038.8311,569.7153 Q1039.7358,569.7153 1040.2339,569.3044 Q1040.7319,568.8936 1040.7319,568.1548 Q1040.7319,567.5986 1040.3999,567.1794 Q1040.0679,566.7603 1039.437,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="28" x="1053" y="569.5352">State</text><!--MD5=[459774bc3132a512e803dcb14c2490a9]
class consensus.TimeoutTicker--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="consensus.TimeoutTicker" style="stroke: #A80036; stroke-width: 1.5;" width="115" x="995.5" y="365"/><ellipse cx="1010.5" cy="381" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1006.9277,377.2651 L1006.9277,375.1069 L1014.3071,375.1069 L1014.3071,377.2651 L1011.8418,377.2651 L1011.8418,385.3418 L1014.3071,385.3418 L1014.3071,387.5 L1006.9277,387.5 L1006.9277,385.3418 L1009.3931,385.3418 L1009.3931,377.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="83" x="1024.5" y="385.5352">TimeoutTicker</text><!--MD5=[6539bd3ad3538eb8cc5d99485abe7976]
class consensus.timeoutTicker--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.5;" width="111" x="998.5" y="457"/><ellipse cx="1013.5" cy="473" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1012.7334,474.063 Q1010.8823,473.3574 1010.2266,472.5813 Q1009.5708,471.8052 1009.5708,470.4937 Q1009.5708,468.8086 1010.6499,467.8457 Q1011.729,466.8828 1013.6133,466.8828 Q1014.4683,466.8828 1015.3232,467.0779 Q1016.1782,467.2729 1017.0166,467.6548 L1017.0166,470.0454 Q1016.228,469.4893 1015.4146,469.1987 Q1014.6011,468.9082 1013.8042,468.9082 Q1012.916,468.9082 1012.4429,469.2651 Q1011.9697,469.6221 1011.9697,470.2861 Q1011.9697,470.8008 1012.3142,471.137 Q1012.6587,471.4731 1013.7544,471.8799 L1014.8086,472.2783 Q1016.3027,472.8262 1017.0083,473.731 Q1017.7139,474.6357 1017.7139,476.0137 Q1017.7139,477.8896 1016.6057,478.8152 Q1015.4976,479.7407 1013.2563,479.7407 Q1012.335,479.7407 1011.4094,479.5208 Q1010.4839,479.3008 1009.6206,478.8691 L1009.6206,476.3374 Q1010.6001,477.0347 1011.5173,477.375 Q1012.4346,477.7153 1013.3311,477.7153 Q1014.2358,477.7153 1014.7339,477.3044 Q1015.2319,476.8936 1015.2319,476.1548 Q1015.2319,475.5986 1014.8999,475.1794 Q1014.5679,474.7603 1013.937,474.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="1027.5" y="477.5352">timeoutTicker</text><!--MD5=[f90addf20bd1e85cf17f517894494b4c]
class service.BaseService--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="service.BaseService" style="stroke: #A80036; stroke-width: 1.5;" width="99" x="1114.5" y="166"/><ellipse cx="1129.5" cy="182" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1128.7334,183.063 Q1126.8823,182.3574 1126.2266,181.5813 Q1125.5708,180.8052 1125.5708,179.4937 Q1125.5708,177.8086 1126.6499,176.8457 Q1127.729,175.8828 1129.6133,175.8828 Q1130.4683,175.8828 1131.3232,176.0779 Q1132.1782,176.2729 1133.0166,176.6548 L1133.0166,179.0454 Q1132.228,178.4893 1131.4146,178.1987 Q1130.6011,177.9082 1129.8042,177.9082 Q1128.916,177.9082 1128.4429,178.2651 Q1127.9697,178.6221 1127.9697,179.2861 Q1127.9697,179.8008 1128.3142,180.137 Q1128.6587,180.4731 1129.7544,180.8799 L1130.8086,181.2783 Q1132.3027,181.8262 1133.0083,182.731 Q1133.7139,183.6357 1133.7139,185.0137 Q1133.7139,186.8896 1132.6057,187.8152 Q1131.4976,188.7407 1129.2563,188.7407 Q1128.335,188.7407 1127.4094,188.5208 Q1126.4839,188.3008 1125.6206,187.8691 L1125.6206,185.3374 Q1126.6001,186.0347 1127.5173,186.375 Q1128.4346,186.7153 1129.3311,186.7153 Q1130.2358,186.7153 1130.7339,186.3044 Q1131.2319,185.8936 1131.2319,185.1548 Q1131.2319,184.5986 1130.8999,184.1794 Q1130.5679,183.7603 1129.937,183.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="1143.5" y="186.5352">BaseService</text><!--MD5=[fd25aa4d66dcc726e577441cd7f3c4c1]
class service.Service--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="service.Service" style="stroke: #A80036; stroke-width: 1.5;" width="72" x="1128" y="59"/><ellipse cx="1143" cy="75" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1139.4277,71.2651 L1139.4277,69.1069 L1146.8071,69.1069 L1146.8071,71.2651 L1144.3418,71.2651 L1144.3418,79.3418 L1146.8071,79.3418 L1146.8071,81.5 L1139.4277,81.5 L1139.4277,79.3418 L1141.8931,79.3418 L1141.8931,71.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="40" x="1157" y="79.5352">Service</text><!--MD5=[25fe063c8a3f29e5d7c6ad772f20110d]
class pex.AddrBook--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="pex.AddrBook" style="stroke: #A80036; stroke-width: 1.5;" width="89" x="1359.5" y="457"/><ellipse cx="1374.5" cy="473" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1370.9277,469.2651 L1370.9277,467.1069 L1378.3071,467.1069 L1378.3071,469.2651 L1375.8418,469.2651 L1375.8418,477.3418 L1378.3071,477.3418 L1378.3071,479.5 L1370.9277,479.5 L1370.9277,477.3418 L1373.3931,477.3418 L1373.3931,469.2651 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="1388.5" y="477.5352">AddrBook</text><!--MD5=[50f3d529d9046543c45825871bb0cefd]
class pex.Reactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="pex.Reactor" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="1362" y="641"/><ellipse cx="1377" cy="657" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1376.2334,658.063 Q1374.3823,657.3574 1373.7266,656.5813 Q1373.0708,655.8052 1373.0708,654.4937 Q1373.0708,652.8086 1374.1499,651.8457 Q1375.229,650.8828 1377.1133,650.8828 Q1377.9683,650.8828 1378.8232,651.0779 Q1379.6782,651.2729 1380.5166,651.6548 L1380.5166,654.0454 Q1379.728,653.4893 1378.9146,653.1987 Q1378.1011,652.9082 1377.3042,652.9082 Q1376.416,652.9082 1375.9429,653.2651 Q1375.4697,653.6221 1375.4697,654.2861 Q1375.4697,654.8008 1375.8142,655.137 Q1376.1587,655.4731 1377.2544,655.8799 L1378.3086,656.2783 Q1379.8027,656.8262 1380.5083,657.731 Q1381.2139,658.6357 1381.2139,660.0137 Q1381.2139,661.8896 1380.1057,662.8152 Q1378.9976,663.7407 1376.7563,663.7407 Q1375.835,663.7407 1374.9094,663.5208 Q1373.9839,663.3008 1373.1206,662.8691 L1373.1206,660.3374 Q1374.1001,661.0347 1375.0173,661.375 Q1375.9346,661.7153 1376.8311,661.7153 Q1377.7358,661.7153 1378.2339,661.3044 Q1378.7319,660.8936 1378.7319,660.1548 Q1378.7319,659.5986 1378.3999,659.1794 Q1378.0679,658.7603 1377.437,658.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="1391" y="661.5352">Reactor</text><!--MD5=[1702e2ab1767e10b6b96d3abf14550ab]
class pex.addrBook--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="pex.addrBook" style="stroke: #A80036; stroke-width: 1.5;" width="88" x="1359" y="549"/><ellipse cx="1374" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1373.2334,566.063 Q1371.3823,565.3574 1370.7266,564.5813 Q1370.0708,563.8052 1370.0708,562.4937 Q1370.0708,560.8086 1371.1499,559.8457 Q1372.229,558.8828 1374.1133,558.8828 Q1374.9683,558.8828 1375.8232,559.0779 Q1376.6782,559.2729 1377.5166,559.6548 L1377.5166,562.0454 Q1376.728,561.4893 1375.9146,561.1987 Q1375.1011,560.9082 1374.3042,560.9082 Q1373.416,560.9082 1372.9429,561.2651 Q1372.4697,561.6221 1372.4697,562.2861 Q1372.4697,562.8008 1372.8142,563.137 Q1373.1587,563.4731 1374.2544,563.8799 L1375.3086,564.2783 Q1376.8027,564.8262 1377.5083,565.731 Q1378.2139,566.6357 1378.2139,568.0137 Q1378.2139,569.8896 1377.1057,570.8152 Q1375.9976,571.7407 1373.7563,571.7407 Q1372.835,571.7407 1371.9094,571.5208 Q1370.9839,571.3008 1370.1206,570.8691 L1370.1206,568.3374 Q1371.1001,569.0347 1372.0173,569.375 Q1372.9346,569.7153 1373.8311,569.7153 Q1374.7358,569.7153 1375.2339,569.3044 Q1375.7319,568.8936 1375.7319,568.1548 Q1375.7319,567.5986 1375.3999,567.1794 Q1375.0679,566.7603 1374.437,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="1388" y="569.5352">addrBook</text><!--MD5=[895deeae2e78339a0fd04d11e3d78d45]
class blockchain.BlockPool--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="blockchain.BlockPool" style="stroke: #A80036; stroke-width: 1.5;" width="86" x="1552" y="549"/><ellipse cx="1567" cy="565" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1566.2334,566.063 Q1564.3823,565.3574 1563.7266,564.5813 Q1563.0708,563.8052 1563.0708,562.4937 Q1563.0708,560.8086 1564.1499,559.8457 Q1565.229,558.8828 1567.1133,558.8828 Q1567.9683,558.8828 1568.8232,559.0779 Q1569.6782,559.2729 1570.5166,559.6548 L1570.5166,562.0454 Q1569.728,561.4893 1568.9146,561.1987 Q1568.1011,560.9082 1567.3042,560.9082 Q1566.416,560.9082 1565.9429,561.2651 Q1565.4697,561.6221 1565.4697,562.2861 Q1565.4697,562.8008 1565.8142,563.137 Q1566.1587,563.4731 1567.2544,563.8799 L1568.3086,564.2783 Q1569.8027,564.8262 1570.5083,565.731 Q1571.2139,566.6357 1571.2139,568.0137 Q1571.2139,569.8896 1570.1057,570.8152 Q1568.9976,571.7407 1566.7563,571.7407 Q1565.835,571.7407 1564.9094,571.5208 Q1563.9839,571.3008 1563.1206,570.8691 L1563.1206,568.3374 Q1564.1001,569.0347 1565.0173,569.375 Q1565.9346,569.7153 1566.8311,569.7153 Q1567.7358,569.7153 1568.2339,569.3044 Q1568.7319,568.8936 1568.7319,568.1548 Q1568.7319,567.5986 1568.3999,567.1794 Q1568.0679,566.7603 1567.437,566.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="1581" y="569.5352">BlockPool</text><!--MD5=[e6490a5898b7b3dc951945c812582f92]
class blockchain.BlockchainReactor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="blockchain.BlockchainReactor" style="stroke: #A80036; stroke-width: 1.5;" width="136" x="1527" y="641"/><ellipse cx="1542" cy="657" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1541.2334,658.063 Q1539.3823,657.3574 1538.7266,656.5813 Q1538.0708,655.8052 1538.0708,654.4937 Q1538.0708,652.8086 1539.1499,651.8457 Q1540.229,650.8828 1542.1133,650.8828 Q1542.9683,650.8828 1543.8232,651.0779 Q1544.6782,651.2729 1545.5166,651.6548 L1545.5166,654.0454 Q1544.728,653.4893 1543.9146,653.1987 Q1543.1011,652.9082 1542.3042,652.9082 Q1541.416,652.9082 1540.9429,653.2651 Q1540.4697,653.6221 1540.4697,654.2861 Q1540.4697,654.8008 1540.8142,655.137 Q1541.1587,655.4731 1542.2544,655.8799 L1543.3086,656.2783 Q1544.8027,656.8262 1545.5083,657.731 Q1546.2139,658.6357 1546.2139,660.0137 Q1546.2139,661.8896 1545.1057,662.8152 Q1543.9976,663.7407 1541.7563,663.7407 Q1540.835,663.7407 1539.9094,663.5208 Q1538.9839,663.3008 1538.1206,662.8691 L1538.1206,660.3374 Q1539.1001,661.0347 1540.0173,661.375 Q1540.9346,661.7153 1541.8311,661.7153 Q1542.7358,661.7153 1543.2339,661.3044 Q1543.7319,660.8936 1543.7319,660.1548 Q1543.7319,659.5986 1543.3999,659.1794 Q1543.0679,658.7603 1542.437,658.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="1556" y="661.5352">BlockchainReactor</text><!--MD5=[fcaca2bf5dc04d2f211fe7455be96c63]
class blockchain.bpRequester--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="blockchain.bpRequester" style="stroke: #A80036; stroke-width: 1.5;" width="107" x="1555.5" y="457"/><ellipse cx="1570.5" cy="473" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1569.7334,474.063 Q1567.8823,473.3574 1567.2266,472.5813 Q1566.5708,471.8052 1566.5708,470.4937 Q1566.5708,468.8086 1567.6499,467.8457 Q1568.729,466.8828 1570.6133,466.8828 Q1571.4683,466.8828 1572.3232,467.0779 Q1573.1782,467.2729 1574.0166,467.6548 L1574.0166,470.0454 Q1573.228,469.4893 1572.4146,469.1987 Q1571.6011,468.9082 1570.8042,468.9082 Q1569.916,468.9082 1569.4429,469.2651 Q1568.9697,469.6221 1568.9697,470.2861 Q1568.9697,470.8008 1569.3142,471.137 Q1569.6587,471.4731 1570.7544,471.8799 L1571.8086,472.2783 Q1573.3027,472.8262 1574.0083,473.731 Q1574.7139,474.6357 1574.7139,476.0137 Q1574.7139,477.8896 1573.6057,478.8152 Q1572.4976,479.7407 1570.2563,479.7407 Q1569.335,479.7407 1568.4094,479.5208 Q1567.4839,479.3008 1566.6206,478.8691 L1566.6206,476.3374 Q1567.6001,477.0347 1568.5173,477.375 Q1569.4346,477.7153 1570.3311,477.7153 Q1571.2358,477.7153 1571.7339,477.3044 Q1572.2319,476.8936 1572.2319,476.1548 Q1572.2319,475.5986 1571.8999,475.1794 Q1571.5679,474.7603 1570.937,474.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="1584.5" y="477.5352">bpRequester</text><!--MD5=[2fee26f1c5de6d1a907f79bec55ff11f]
class conn.Channel--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="conn.Channel" style="stroke: #A80036; stroke-width: 1.5;" width="78" x="157" y="166"/><ellipse cx="172" cy="182" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M171.2334,183.063 Q169.3823,182.3574 168.7266,181.5813 Q168.0708,180.8052 168.0708,179.4937 Q168.0708,177.8086 169.1499,176.8457 Q170.229,175.8828 172.1133,175.8828 Q172.9683,175.8828 173.8232,176.0779 Q174.6782,176.2729 175.5166,176.6548 L175.5166,179.0454 Q174.728,178.4893 173.9146,178.1987 Q173.1011,177.9082 172.3042,177.9082 Q171.416,177.9082 170.9429,178.2651 Q170.4697,178.6221 170.4697,179.2861 Q170.4697,179.8008 170.8142,180.137 Q171.1587,180.4731 172.2544,180.8799 L173.3086,181.2783 Q174.8027,181.8262 175.5083,182.731 Q176.2139,183.6357 176.2139,185.0137 Q176.2139,186.8896 175.1057,187.8152 Q173.9976,188.7407 171.7563,188.7407 Q170.835,188.7407 169.9094,188.5208 Q168.9839,188.3008 168.1206,187.8691 L168.1206,185.3374 Q169.1001,186.0347 170.0173,186.375 Q170.9346,186.7153 171.8311,186.7153 Q172.7358,186.7153 173.2339,186.3044 Q173.7319,185.8936 173.7319,185.1548 Q173.7319,184.5986 173.3999,184.1794 Q173.0679,183.7603 172.437,183.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="186" y="186.5352">Channel</text><!--MD5=[f5a56f142683e57a747013f71260e772]
class conn.ChannelDescriptor--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="conn.ChannelDescriptor" style="stroke: #A80036; stroke-width: 1.5;" width="138" x="144" y="59"/><ellipse cx="159" cy="75" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M158.2334,76.063 Q156.3823,75.3574 155.7266,74.5813 Q155.0708,73.8052 155.0708,72.4937 Q155.0708,70.8086 156.1499,69.8457 Q157.229,68.8828 159.1133,68.8828 Q159.9683,68.8828 160.8232,69.0779 Q161.6782,69.2729 162.5166,69.6548 L162.5166,72.0454 Q161.728,71.4893 160.9146,71.1987 Q160.1011,70.9082 159.3042,70.9082 Q158.416,70.9082 157.9429,71.2651 Q157.4697,71.6221 157.4697,72.2861 Q157.4697,72.8008 157.8142,73.137 Q158.1587,73.4731 159.2544,73.8799 L160.3086,74.2783 Q161.8027,74.8262 162.5083,75.731 Q163.2139,76.6357 163.2139,78.0137 Q163.2139,79.8896 162.1057,80.8152 Q160.9976,81.7407 158.7563,81.7407 Q157.835,81.7407 156.9094,81.5208 Q155.9839,81.3008 155.1206,80.8691 L155.1206,78.3374 Q156.1001,79.0347 157.0173,79.375 Q157.9346,79.7153 158.8311,79.7153 Q159.7358,79.7153 160.2339,79.3044 Q160.7319,78.8936 160.7319,78.1548 Q160.7319,77.5986 160.3999,77.1794 Q160.0679,76.7603 159.437,76.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="106" x="173" y="79.5352">ChannelDescriptor</text><!--MD5=[587ec7518afc6b0bd734d507e80c24a2]
class conn.MConnection--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="conn.MConnection" style="stroke: #A80036; stroke-width: 1.5;" width="105" x="176.5" y="258"/><ellipse cx="191.5" cy="274" fill="#7FFFD4" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M190.7334,275.063 Q188.8823,274.3574 188.2266,273.5813 Q187.5708,272.8052 187.5708,271.4937 Q187.5708,269.8086 188.6499,268.8457 Q189.729,267.8828 191.6133,267.8828 Q192.4683,267.8828 193.3232,268.0779 Q194.1782,268.2729 195.0166,268.6548 L195.0166,271.0454 Q194.228,270.4893 193.4146,270.1987 Q192.6011,269.9082 191.8042,269.9082 Q190.916,269.9082 190.4429,270.2651 Q189.9697,270.6221 189.9697,271.2861 Q189.9697,271.8008 190.3142,272.137 Q190.6587,272.4731 191.7544,272.8799 L192.8086,273.2783 Q194.3027,273.8262 195.0083,274.731 Q195.7139,275.6357 195.7139,277.0137 Q195.7139,278.8896 194.6057,279.8152 Q193.4976,280.7407 191.2563,280.7407 Q190.335,280.7407 189.4094,280.5208 Q188.4839,280.3008 187.6206,279.8691 L187.6206,277.3374 Q188.6001,278.0347 189.5173,278.375 Q190.4346,278.7153 191.3311,278.7153 Q192.2358,278.7153 192.7339,278.3044 Q193.2319,277.8936 193.2319,277.1548 Q193.2319,276.5986 192.8999,276.1794 Q192.5679,275.7603 191.937,275.5195 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="205.5" y="278.5352">MConnection</text><!--MD5=[5cf6fe4c3529dc3e42c3fd90ef76bcd8]
class net.Conn--><rect fill="#FEFECE" filter="url(#f17x5gu7ccmdp2)" height="32" id="net.Conn" style="stroke: #A80036; stroke-width: 1.5;" width="61" x="348.5" y="59"/><ellipse cx="363.5" cy="75" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M365.9731,81.1431 Q365.3921,81.4419 364.7529,81.5913 Q364.1138,81.7407 363.4082,81.7407 Q360.9014,81.7407 359.5815,80.0889 Q358.2617,78.437 358.2617,75.3159 Q358.2617,72.1865 359.5815,70.5347 Q360.9014,68.8828 363.4082,68.8828 Q364.1138,68.8828 364.7612,69.0322 Q365.4087,69.1816 365.9731,69.4805 L365.9731,72.2031 Q365.3423,71.6221 364.7488,71.3523 Q364.1553,71.0825 363.5244,71.0825 Q362.1797,71.0825 361.4949,72.1492 Q360.8101,73.2158 360.8101,75.3159 Q360.8101,77.4077 361.4949,78.4744 Q362.1797,79.541 363.5244,79.541 Q364.1553,79.541 364.7488,79.2712 Q365.3423,79.0015 365.9731,78.4204 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="377.5" y="79.5352">Conn</text><!--MD5=[fb0e8f546a54530273f5e6ecfa9545bc]
reverse link p2p.BaseReactor to evidence.Reactor--><path d="M733.59,587.97 C722.19,594.62 708.97,601.17 696,605 C464.48,673.41 393.44,610.15 154,641 C141.01,642.67 126.92,645.17 114.33,647.65 " fill="none" id="p2p.BaseReactor&lt;-evidence.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="744.73,581.12,737.5236,580.8585,734.5106,587.4099,741.7169,587.6714,744.73,581.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[52db47100375e0bfc2325558423d152f]
reverse link evidence.Pool to evidence.Reactor--><path d="M76,586.62 C76,603.19 76,626.08 76,640.96 " fill="none" id="evidence.Pool&lt;-evidence.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="76,581.27,72,590.27,76,586.27,80,590.27,76,581.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="42" x="26.5187" y="630.1976">evpool</text><!--MD5=[a6a5fb2cd11d7bd41528e5b6f3061272]
reverse link evidence.Store to evidence.Pool--><path d="M76,494.62 C76,511.19 76,534.08 76,548.96 " fill="none" id="evidence.Store&lt;-evidence.Pool" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="76,489.27,72,498.27,76,494.27,80,498.27,76,489.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="38.3" y="538.1976">store</text><!--MD5=[939fce458533f5798e80ca838a4a01f7]
reverse link p2p.BaseReactor to mempool.Reactor--><path d="M733.23,587.8 C721.88,594.37 708.79,600.91 696,605 C544.89,653.28 353.36,657.45 273.09,656.81 " fill="none" id="p2p.BaseReactor&lt;-mempool.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="744.34,581.04,737.135,580.7432,734.0899,587.2798,741.2949,587.5766,744.34,581.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d544c30e9d9a2f679bf2da5b8a8fe0f8]
reverse link mempool.Mempool to mempool.CListMempool--><path d="M226,509.61 C226,523.31 226,538.22 226,548.96 " fill="none" id="mempool.Mempool&lt;-mempool.CListMempool" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="219,509.27,226,489.27,233,509.27,219,509.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d70b6ddb83e9a255dc4aeb6704f07e46]
reverse link mempool.CListMempool to mempool.Reactor--><path d="M228.06,586.62 C229.72,603.19 232.01,626.08 233.5,640.96 " fill="none" id="mempool.CListMempool&lt;-mempool.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="227.53,581.27,224.448,590.6242,228.0289,586.245,232.4081,589.8259,227.53,581.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="59" x="163.4563" y="630.1976">mempool</text><!--MD5=[6b8e3757e575e9f6946e6159fc51148a]
reverse link p2p.BaseReactor to consensus.Reactor--><path d="M825.15,585.15 C879.73,602.82 959.18,628.54 1005.82,643.64 " fill="none" id="p2p.BaseReactor&lt;-consensus.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="812.53,581.06,817.0084,586.7119,823.948,584.7517,819.4696,579.0999,812.53,581.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[18cc743c9af220becef2c54c3ab06642]
reverse link service.BaseService to consensus.State--><path d="M1173.78,210.93 C1178.16,224.88 1182.82,242.13 1185,258 C1188.39,282.66 1187.65,289.25 1185,314 C1176.27,395.47 1172.66,420.96 1127,489 C1111.41,512.24 1088.16,534.66 1072.11,548.83 " fill="none" id="service.BaseService&lt;-consensus.State" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1169.6,198.25,1167.6809,205.201,1173.3591,209.646,1175.2782,202.695,1169.6,198.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c29d0d0f347904d208386409630019bc]
reverse link service.BaseService to consensus.timeoutTicker--><path d="M1164.54,211.33 C1164.22,253.96 1159.14,336.11 1128,397 C1115.43,421.59 1091.94,443.27 1074.79,456.91 " fill="none" id="service.BaseService&lt;-consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1164.49,198.23,1160.5098,204.2432,1164.5296,210.2299,1168.5098,204.2168,1164.49,198.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2b2b8204af6f9dba9202740b5f15b139]
reverse link consensus.TimeoutTicker to consensus.timeoutTicker--><path d="M1053.4,417.61 C1053.55,431.31 1053.71,446.22 1053.83,456.96 " fill="none" id="consensus.TimeoutTicker&lt;-consensus.timeoutTicker" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1046.39,417.34,1053.17,397.27,1060.39,417.19,1046.39,417.34" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[369a72accf9e8f79e2efdad599083518]
reverse link consensus.State to consensus.Reactor--><path d="M1051.71,586.62 C1049.87,603.19 1047.32,626.08 1045.67,640.96 " fill="none" id="consensus.State&lt;-consensus.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1052.3,581.27,1047.3225,589.7685,1051.7431,586.2389,1055.2728,590.6595,1052.3,581.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="30" x="1010.9212" y="630.1976">conS</text><!--MD5=[7fb28dab5e661837276b0bd759804c53]
reverse link consensus.timeoutTicker to consensus.State--><path d="M1054,494.62 C1054,511.19 1054,534.08 1054,548.96 " fill="none" id="consensus.timeoutTicker&lt;-consensus.State" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1054,489.27,1050,498.27,1054,494.27,1058,498.27,1054,489.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="88" x="950.325" y="538.1976">timeoutTicker</text><!--MD5=[125ca6c2eebb5c9a5f38ac24c4b9aa12]
reverse link p2p.BaseReactor to pex.Reactor--><path d="M830.39,578.84 C872.55,586.99 928.92,597.39 979,605 C1119.66,626.38 1287.86,644.54 1361.87,652.16 " fill="none" id="p2p.BaseReactor&lt;-pex.Reactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="817.5,576.33,822.6297,581.3981,829.281,578.6123,824.1513,573.5442,817.5,576.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b4c5bfb9e7b5318381569743a01090dc]
reverse link service.BaseService to pex.addrBook--><path d="M1181.64,209.02 C1191.17,223.32 1203,241.47 1213,258 C1273.86,358.62 1275.99,391.69 1342,489 C1356.79,510.81 1376.38,534.07 1389.32,548.81 " fill="none" id="service.BaseService&lt;-pex.addrBook" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1174.26,198.03,1174.2842,205.2411,1180.9499,207.9922,1180.9257,200.7812,1174.26,198.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c7db04e7ef83a300009491f029ecf546]
reverse link pex.AddrBook to pex.addrBook--><path d="M1403.6,509.61 C1403.45,523.31 1403.29,538.22 1403.17,548.96 " fill="none" id="pex.AddrBook&lt;-pex.addrBook" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1396.61,509.19,1403.83,489.27,1410.61,509.34,1396.61,509.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3b08fb894cbd8c66664fcb197a3ccee8]
reverse link pex.addrBook to pex.Reactor--><path d="M1402.31,586.62 C1401.76,603.19 1401,626.08 1400.5,640.96 " fill="none" id="pex.addrBook&lt;-pex.Reactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1402.49,581.27,1398.2085,590.1395,1402.3325,586.2675,1406.2045,590.3915,1402.49,581.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="1362.9781" y="630.1976">book</text><!--MD5=[ac75108900a7da53673606bc12d5f375]
reverse link service.Service to service.BaseService--><path d="M1164,111.1 C1164,129.76 1164,151.73 1164,165.98 " fill="none" id="service.Service&lt;-service.BaseService" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1157,111.04,1164,91.04,1171,111.04,1157,111.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b3ca9392012dbc1ca56a23f1d34c5e32]
reverse link service.BaseService to p2p.BaseReactor--><path d="M1129.84,205.53 C1091.43,231.54 1028.03,276.62 979,322 C894.38,400.31 808.02,509.29 777.52,548.87 " fill="none" id="service.BaseService&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1140.91,198.08,1133.699,198.1108,1130.9539,204.7789,1138.1649,204.7482,1140.91,198.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7d115f226f55dd9d7554f262bc6df33a]
reverse link p2p.Reactor to p2p.BaseReactor--><path d="M699.22,565 C704.28,565 709.34,565 714.39,565 " fill="none" id="p2p.Reactor&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="699.09,572,679.09,565,699.09,558,699.09,572" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9fbf2a7effaeaefa17c476384a1dba2]
reverse link p2p.peerConn to p2p.peer--><path d="M552.71,205.83 C575.38,222.15 605.25,243.66 625.01,257.89 " fill="none" id="p2p.peerConn&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="541.92,198.06,544.4481,204.8134,551.6544,205.0772,549.1263,198.3238,541.92,198.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a4829d3d32a44b3a8142c2ba0a35b7f2]
reverse link service.BaseService to p2p.peer--><path d="M1101.34,193.09 C1015.59,207.02 856.94,233.24 722,258 C706.66,260.82 689.61,264.16 675.56,266.97 " fill="none" id="service.BaseService&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1114.21,191,1107.6464,188.0135,1102.3652,192.9236,1108.9288,195.9101,1114.21,191" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0c3700d192805ae30ab006e56b4633f3]
reverse link p2p.Transport to p2p.MultiplexTransport--><path d="M431.64,406.18 C464.1,422.32 505.77,443.05 533.61,456.89 " fill="none" id="p2p.Transport&lt;-p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="428.09,412.24,413.3,397.06,434.32,399.7,428.09,412.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5fcf14daa37ccae53c4b796a0afc96ba]
reverse link p2p.transportLifecycle to p2p.MultiplexTransport--><path d="M614.71,412.73 C601.94,427.66 587.16,444.93 576.87,456.96 " fill="none" id="p2p.transportLifecycle&lt;-p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="609.62,407.91,627.94,397.27,620.26,417.02,609.62,407.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[050d08726fdf1574cedda3f8be396e30]
reverse link p2p.IPeerSet to p2p.PeerSet--><path d="M779.33,310.1 C779.51,328.76 779.72,350.73 779.86,364.98 " fill="none" id="p2p.IPeerSet&lt;-p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="772.33,310.11,779.14,290.04,786.33,309.98,772.33,310.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a88ba8938669b8d1f443f70d77216d8b]
reverse link p2p.Peer to p2p.peer--><path d="M646,218.61 C646,232.31 646,247.22 646,257.96 " fill="none" id="p2p.Peer&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="639,218.27,646,198.27,653,218.27,639,218.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[dcbf72c94169c61b66662e1a7585d331]
reverse link service.BaseService to p2p.Switch--><path d="M1101.15,189.08 C1047.14,197.1 969.7,215.6 916,258 C859.89,302.31 877.45,339.47 835,397 C818.61,419.21 796.57,442.2 781.86,456.78 " fill="none" id="service.BaseService&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1114.35,187.26,1107.8607,184.1154,1102.4621,188.8961,1108.9514,192.0407,1114.35,187.26" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6e480aef305aad66a6c56b9453c18417]
link p2p.Switch to p2p.BaseReactor--><path d="M756.15,489.27 C752.63,504.36 752.32,527.52 755.2,544.06 " fill="none" id="p2p.Switch-&gt;p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="756.2,548.96,758.3196,539.3419,755.2002,544.061,750.4811,540.9416,756.2,548.96" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="51" x="693.8822" y="509.4645">reactors</text><!--MD5=[b14611813044e641dc988996b3ed6edd]
reverse link p2p.Switch to p2p.BaseReactor--><path d="M777.48,494.19 C780.5,510.8 780.13,533.95 776.38,548.96 " fill="none" id="p2p.Switch&lt;-p2p.BaseReactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="776.43,489.27,774.3969,498.9067,777.4737,494.1598,782.2206,497.2367,776.43,489.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="41" x="731.7748" y="538.1976">Switch</text><!--MD5=[1ab1a2ae8783d41482bcd0d71e5c3297]
reverse link p2p.PeerSet to p2p.Switch--><path d="M776.79,402.62 C774.21,419.19 770.65,442.08 768.34,456.96 " fill="none" id="p2p.PeerSet&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="777.63,397.27,772.29,405.5455,776.859,402.2102,780.1943,406.7792,777.63,397.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="34" x="729.1174" y="446.1976">peers</text><!--MD5=[9fe161fb271e8b8d4eeb24ae21c077f8]
reverse link p2p.MultiplexTransport to p2p.Switch--><path d="M639.97,473 C670.77,473 701.58,473 732.39,473 " fill="none" id="p2p.MultiplexTransport&lt;-p2p.Switch" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="634.62,473,643.62,477,639.62,473,643.62,469,634.62,473" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="666.3681" y="469.6273">transport</text><!--MD5=[2c56d9259f5f2a3bf68e766ea18eda88]
reverse link p2p.peer to p2p.PeerSet--><path d="M680.18,292.61 C694.6,300.72 711.22,310.98 725,322 C741.04,334.82 756.92,352.2 767.46,364.59 " fill="none" id="p2p.peer&lt;-p2p.PeerSet" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="675.77,290.16,681.6948,298.0274,680.1408,292.5882,685.58,291.0342,675.77,290.16" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="20" x="739.9936" y="354.2896">list</text><!--MD5=[6dab0cf5018abdee25c9290454432299]
reverse link service.BaseService to blockchain.BlockPool--><path d="M1197.74,205.53 C1255.32,244.69 1375.07,329.27 1465,414 C1512.91,459.14 1561.69,520.42 1583.38,548.63 " fill="none" id="service.BaseService&lt;-blockchain.BlockPool" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1186.75,198.09,1189.4788,204.7648,1196.6898,204.8132,1193.9609,198.1383,1186.75,198.09" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3bb5f06186406b38907edea75d49104f]
reverse link p2p.BaseReactor to blockchain.BlockchainReactor--><path d="M830.7,579.71 C872.78,588.16 928.93,598.58 979,605 C1193.83,632.54 1249.37,620.58 1465,641 C1485.13,642.91 1506.98,645.3 1526.91,647.61 " fill="none" id="p2p.BaseReactor&lt;-blockchain.BlockchainReactor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="817.84,577.1,822.9247,582.2133,829.6003,579.4863,824.5156,574.3731,817.84,577.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3d3c10340d2f7c5bcff2b17b282dbd00]
reverse link service.BaseService to blockchain.bpRequester--><path d="M1226.75,188.66 C1318.54,198.11 1483.37,219.94 1528,258 C1590.27,311.1 1604.77,417.31 1608.06,456.78 " fill="none" id="service.BaseService&lt;-blockchain.bpRequester" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1213.76,187.35,1219.3302,191.9296,1225.6999,188.5493,1220.1297,183.9697,1213.76,187.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[eb1ed003c8de509d6780859c62e5a395]
reverse link blockchain.BlockPool to blockchain.BlockchainReactor--><path d="M1595,586.62 C1595,603.19 1595,626.08 1595,640.96 " fill="none" id="blockchain.BlockPool&lt;-blockchain.BlockchainReactor" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1595,581.27,1591,590.27,1595,586.27,1599,590.27,1595,581.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="28" x="1562.0125" y="630.1976">pool</text><!--MD5=[25d9b3c2f61d11c3d9c1dc5fb8c24878]
reverse link blockchain.bpRequester to blockchain.BlockPool--><path d="M1605.79,494.62 C1603.21,511.19 1599.65,534.08 1597.34,548.96 " fill="none" id="blockchain.bpRequester&lt;-blockchain.BlockPool" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1606.63,489.27,1601.29,497.5455,1605.859,494.2102,1609.1943,498.7792,1606.63,489.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="66" x="1520.4174" y="538.1976">requesters</text><!--MD5=[6c42c0b17497db409bca3bfd77748695]
reverse link service.BaseService to conn.MConnection--><path d="M1101.22,191.32 C1034.9,199.89 927.23,213.22 834,222 C606.89,243.39 548.61,231.81 322,258 C308.84,259.52 294.7,261.58 281.51,263.69 " fill="none" id="service.BaseService&lt;-conn.MConnection" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1114.32,189.62,1107.8518,186.4321,1102.4214,191.1766,1108.8896,194.3645,1114.32,189.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2796f579d4abe5e4d63619185575caf2]
reverse link conn.MConnection to p2p.peer--><path d="M275.43,256.34 C294.91,249.82 318,243.23 339.5,240 C433.11,225.92 459.27,223.58 552.5,240 C574.61,243.9 598.38,252.6 616.42,260.23 " fill="none" id="conn.MConnection&lt;-p2p.peer" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="270.55,257.99,280.3573,258.8943,275.2862,256.3874,277.7931,251.3164,270.55,257.99" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="565.5984" y="254.5652">mconn</text><!--MD5=[c4e7f45755fe629babf9d33de6efce47]
reverse link conn.Channel to conn.MConnection--><path d="M203.4,203.19 C209.49,219.8 217.98,242.95 223.48,257.96 " fill="none" id="conn.Channel&lt;-conn.MConnection" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="201.6,198.27,200.9357,208.0964,203.3179,202.9656,208.4487,205.3478,201.6,198.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="56" x="155.5385" y="247.1976">channels</text><!--MD5=[dd4cf13f703aefb68bb6a5bea7501b68]
reverse link conn.ChannelDescriptor to conn.Channel--><path d="M209.76,95.98 C206.46,116.39 201.41,147.6 198.43,165.98 " fill="none" id="conn.ChannelDescriptor&lt;-conn.Channel" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="210.56,91.04,205.1697,99.2828,209.7589,95.9754,213.0663,100.5646,210.56,91.04" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="29" x="165.1301" y="155.2247">desc</text><!--MD5=[1fb738791e73d065ffc593a5e7b5b019]
reverse link net.Conn to conn.MConnection--><path d="M353.43,94.18 C343,102.3 331.24,112.43 322,123 C283.29,167.3 250.33,229.53 236.27,257.87 " fill="none" id="net.Conn&lt;-conn.MConnection" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="357.51,91.05,347.9331,93.3486,353.541,94.091,352.7987,99.6989,357.51,91.05" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="31" x="244.0972" y="247.3689">conn</text><!--MD5=[eb233170bcb015c61ecd52b7091685bd]
reverse link net.Conn to conn.Channel--><path d="M346.74,93.64 C332.18,101.05 314.56,109.26 298,115 C282.51,120.37 276.61,115.58 262,123 C241.05,133.64 221.42,152.46 209.11,165.78 " fill="none" id="net.Conn&lt;-conn.Channel" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="351.56,91.17,341.7271,91.7304,347.1139,93.4574,345.3869,98.8442,351.56,91.17" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="31" x="218.9447" y="155.248">conn</text><!--MD5=[eb9ce36c39a54a5ea7008fd0f467310c]
reverse link net.Conn to p2p.connSetItem--><path d="M380.02,96.16 C382.03,135.71 386.45,222.67 388.23,257.82 " fill="none" id="net.Conn&lt;-p2p.connSetItem" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="379.77,91.13,376.2113,100.3135,380.0126,96.1241,384.2019,99.9253,379.77,91.13" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="31" x="351.6372" y="247.3017">conn</text><!--MD5=[85cc07f7a9009753228026d51a89f1a9]
reverse link p2p.connSetItem to p2p.connSet--><path d="M412.08,293.45 C422.37,301.91 434.51,312.22 445,322 C459.94,335.94 476.06,352.84 487.14,364.8 " fill="none" id="p2p.connSetItem&lt;-p2p.connSet" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="408.09,290.19,412.5174,298.9876,411.9579,293.3585,417.587,292.799,408.09,290.19" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="31" x="446.0475" y="354.2749">conn</text><!--MD5=[1645e38de450ed825023b7de5808ac1b]
reverse link p2p.connSet to p2p.MultiplexTransport--><path d="M514.84,401.77 C526.48,418.4 542.87,441.82 553.47,456.96 " fill="none" id="p2p.connSet&lt;-p2p.MultiplexTransport" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="511.69,397.27,513.5765,406.9365,514.5583,401.3655,520.1293,402.3473,511.69,397.27" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="504.9499" y="446.1976">conns</text><!--MD5=[bd84bf6db8ad61ce24504e58d3a584d4]
reverse link p2p.ConnSet to p2p.connSet--><path d="M509.65,310.1 C507.34,328.76 504.62,350.73 502.86,364.98 " fill="none" id="p2p.ConnSet&lt;-p2p.connSet" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="502.73,309.03,512.14,290.04,516.63,310.75,502.73,309.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[72ae5fa457541c07a4e8d5ad283b7652]
reverse link net.Conn to p2p.peerConn--><path d="M403.61,94.2 C431.1,114.52 475.09,147.05 500.69,165.98 " fill="none" id="net.Conn&lt;-p2p.peerConn" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="399.35,91.04,404.1843,99.6207,403.362,94.024,408.9587,93.2016,399.35,91.04" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="31" x="456.9327" y="155.2247">conn</text><!--MD5=[38a41754103611d3c0627897e013ddbf]
@startuml

namespace evidence {
    class Pool << (S,Aquamarine) >> {
        - logger log.Logger
        - store *Store
        - evidenceList *clist.CList
        - stateDB tm-db.DB
        - mtx sync.Mutex
        - state state.State

        - removeEvidence(height int64, ....) 

        + EvidenceFront() *clist.CElement
        + EvidenceWaitChan() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + SetLogger(l log.Logger) 
        + PriorityEvidence() []types.Evidence
        + PendingEvidence(maxNum int64) []types.Evidence
        + State() state.State
        + Update(block *types.Block, state state.State) 
        + AddEvidence(evidence types.Evidence) error
        + MarkEvidenceAsCommitted(height int64, ....) 
        + IsCommitted(evidence types.Evidence) bool

    }
    class Reactor << (S,Aquamarine) >> {
        - evpool *Pool
        - eventBus *types.EventBus

        - broadcastEvidenceRoutine(peer p2p.Peer) 
        - checkSendEvidenceMessage(peer p2p.Peer, ev types.Evidence) (Message, bool)

        + SetLogger(l log.Logger) 
        + GetChannels() []*p2p.ChannelDescriptor
        + AddPeer(peer p2p.Peer) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 
        + SetEventBus(b *types.EventBus) 

    }
    class Store << (S,Aquamarine) >> {
        - db tm-db.DB

        - listEvidence(prefixKey string, maxNum int64) []types.Evidence
        - getInfo(evidence types.Evidence) Info

        + PriorityEvidence() []types.Evidence
        + PendingEvidence(maxNum int64) []types.Evidence
        + GetInfo(height int64, hash []byte) Info
        + AddNewEvidence(evidence types.Evidence, priority int64) bool
        + MarkEvidenceAsBroadcasted(evidence types.Evidence) 
        + MarkEvidenceAsCommitted(evidence types.Evidence) 

    }
}
"p2p.BaseReactor" *-down- "evidence.Reactor"
"evidence.Pool" <.. "evpool" "evidence.Reactor"
"evidence.Store" <.. "store" "evidence.Pool"

namespace mempool {
    class CListMempool << (S,Aquamarine) >> {
        - height int64
        - txsBytes int64
        - rechecking int32
        - notifiedTxsAvailable bool
        - txsAvailable <font color=blue>chan</font> <font color=blue>struct</font>{}
        - config *config.MempoolConfig
        - proxyMtx sync.Mutex
        - proxyAppConn proxy.AppConnMempool
        - txs *clist.CList
        - preCheck PreCheckFunc
        - postCheck PostCheckFunc
        - recheckCursor *clist.CElement
        - recheckEnd *clist.CElement
        - txsMap sync.Map
        - cache txCache
        - wal *autofile.AutoFile
        - logger log.Logger
        - metrics *Metrics

        - globalCb(req *types.Request, res *types.Response) 
        - reqResCb(tx []byte, peerID uint16, ....) <font color=blue>func</font>(*types.Response) 
        - addTx(memTx *mempoolTx) 
        - removeTx(tx types.Tx, elem *clist.CElement, removeFromCache bool) 
        - resCbFirstTime(tx []byte, peerID uint16, peerP2PID p2p.ID, res *types.Response) 
        - resCbRecheck(req *types.Request, res *types.Response) 
        - notifyTxsAvailable() 
        - recheckTxs() 

        + EnableTxsAvailable() 
        + SetLogger(l log.Logger) 
        + InitWAL() 
        + CloseWAL() 
        + Lock() 
        + Unlock() 
        + Size() int
        + TxsBytes() int64
        + FlushAppConn() error
        + Flush() 
        + TxsFront() *clist.CElement
        + TxsWaitChan() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + CheckTx(tx types.Tx, cb <font color=blue>func</font>(*types.Response) , txInfo TxInfo) error
        + TxsAvailable() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + ReapMaxBytesMaxGas(maxBytes int64, maxGas int64) types.Txs
        + ReapMaxTxs(max int) types.Txs
        + Update(height int64, ....) error

    }
    interface Mempool  {
        + CheckTx(tx types.Tx, callback <font color=blue>func</font>(*types.Response) , txInfo TxInfo) error
        + ReapMaxBytesMaxGas(maxBytes int64, maxGas int64) types.Txs
        + ReapMaxTxs(max int) types.Txs
        + Lock() 
        + Unlock() 
        + Update(blockHeight int64, ....) error
        + FlushAppConn() error
        + Flush() 
        + TxsAvailable() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + EnableTxsAvailable() 
        + Size() int
        + TxsBytes() int64
        + InitWAL() 
        + CloseWAL() 

    }
    class Reactor << (S,Aquamarine) >> {
        - config *config.MempoolConfig
        - mempool *CListMempool
        - ids *mempoolIDs

        - broadcastTxRoutine(peer p2p.Peer) 
        - decodeMsg(bz []byte) (Message, error)

        + InitPeer(peer p2p.Peer) p2p.Peer
        + SetLogger(l log.Logger) 
        + OnStart() error
        + GetChannels() []*p2p.ChannelDescriptor
        + AddPeer(peer p2p.Peer) 
        + RemovePeer(peer p2p.Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 

    }
}
"p2p.BaseReactor" *-down- "mempool.Reactor"

"mempool.Mempool" <|- - "mempool.CListMempool"

"mempool.CListMempool" <.. "mempool" "mempool.Reactor"

namespace consensus {
    class Reactor << (S,Aquamarine) >> {
        - conS *State
        - mtx sync.RWMutex
        - fastSync bool
        - eventBus *types.EventBus
        - metrics *Metrics

        - subscribeToBroadcastEvents() 
        - unsubscribeFromBroadcastEvents() 
        - broadcastNewRoundStepMessage(rs *types.RoundState) 
        - broadcastNewValidBlockMessage(rs *types.RoundState) 
        - broadcastHasVoteMessage(vote *types.Vote) 
        - sendNewRoundStepMessage(peer p2p.Peer) 
        - gossipDataRoutine(peer p2p.Peer, ps *PeerState) 
        - gossipDataForCatchup(logger log.Logger, rs *types.RoundState, prs *types.PeerRoundState, ps *PeerState, peer p2p.Peer) 
        - gossipVotesRoutine(peer p2p.Peer, ps *PeerState) 
        - gossipVotesForHeight(logger log.Logger, rs *types.RoundState, prs *types.PeerRoundState, ps *PeerState) bool
        - queryMaj23Routine(peer p2p.Peer, ps *PeerState) 
        - peerStatsRoutine() 
        - updateFastSyncingMetric() 

        + OnStart() error
        + OnStop() 
        + SwitchToConsensus(state state.State, blocksSynced uint64) 
        + GetChannels() []*p2p.ChannelDescriptor
        + InitPeer(peer p2p.Peer) p2p.Peer
        + AddPeer(peer p2p.Peer) 
        + RemovePeer(peer p2p.Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src p2p.Peer, msgBytes []byte) 
        + SetEventBus(b *types.EventBus) 
        + FastSync() bool
        + String() string
        + StringIndented(indent string) string

    }
    class State << (S,Aquamarine) >> {
        - config *config.ConsensusConfig
        - privValidator types.PrivValidator
        - blockStore state.BlockStore
        - blockExec *state.BlockExecutor
        - txNotifier txNotifier
        - evpool evidencePool
        - mtx sync.RWMutex
        - state state.State
        - peerMsgQueue <font color=blue>chan</font> msgInfo
        - internalMsgQueue <font color=blue>chan</font> msgInfo
        - timeoutTicker TimeoutTicker
        - statsMsgQueue <font color=blue>chan</font> msgInfo
        - eventBus *types.EventBus
        - wal WAL
        - replayMode bool
        - doWALCatchup bool
        - nSteps int
        - decideProposal <font color=blue>func</font>(int64, int) 
        - doPrevote <font color=blue>func</font>(int64, int) 
        - setProposal <font color=blue>func</font>(*types.Proposal) error
        - done <font color=blue>chan</font> <font color=blue>struct</font>{}
        - evsw events.EventSwitch
        - metrics *Metrics

        - readReplayMessage(msg *TimedWALMessage, newStepSub types.Subscription) error
        - catchupReplay(csHeight int64) error
        - startForReplay() 
        - startRoutines(maxSteps int) 
        - updateHeight(height int64) 
        - updateRoundStep(round int, step types.RoundStepType) 
        - scheduleRound0(rs *types.RoundState) 
        - scheduleTimeout(duration time.Duration, height int64, round int, step types.RoundStepType) 
        - sendInternalMessage(mi msgInfo) 
        - reconstructLastCommit(state state.State) 
        - updateToState(state state.State) 
        - newStep() 
        - receiveRoutine(maxSteps int) 
        - handleMsg(mi msgInfo) 
        - handleTimeout(ti timeoutInfo, rs types.RoundState) 
        - handleTxsAvailable() 
        - enterNewRound(height int64, round int) 
        - needProofBlock(height int64) bool
        - enterPropose(height int64, round int) 
        - isProposer(address []byte) bool
        - defaultDecideProposal(height int64, round int) 
        - isProposalComplete() bool
        - createProposalBlock() (*types.Block, *types.PartSet)
        - enterPrevote(height int64, round int) 
        - defaultDoPrevote(height int64, round int) 
        - enterPrevoteWait(height int64, round int) 
        - enterPrecommit(height int64, round int) 
        - enterPrecommitWait(height int64, round int) 
        - enterCommit(height int64, commitRound int) 
        - tryFinalizeCommit(height int64) 
        - finalizeCommit(height int64) 
        - recordMetrics(height int64, block *types.Block) 
        - defaultSetProposal(proposal *types.Proposal) error
        - addProposalBlockPart(msg *BlockPartMessage, peerID p2p.ID) (bool, error)
        - tryAddVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        - addVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        - signVote(msgType types.SignedMsgType, hash []byte, header types.PartSetHeader) (*types.Vote, error)
        - voteTime() time.Time
        - signAddVote(msgType types.SignedMsgType, hash []byte, header types.PartSetHeader) *types.Vote

        + ReplayFile(file string, console bool) error
        + SetLogger(l log.Logger) 
        + SetEventBus(b *types.EventBus) 
        + String() string
        + GetState() state.State
        + GetLastHeight() int64
        + GetRoundState() *types.RoundState
        + GetRoundStateJSON() ([]byte, error)
        + GetRoundStateSimpleJSON() ([]byte, error)
        + GetValidators() (int64, []*types.Validator)
        + SetPrivValidator(priv types.PrivValidator) 
        + SetTimeoutTicker(timeoutTicker TimeoutTicker) 
        + LoadCommit(height int64) *types.Commit
        + OnStart() error
        + OnStop() 
        + Wait() 
        + OpenWAL(walFile string) (WAL, error)
        + AddVote(vote *types.Vote, peerID p2p.ID) (bool, error)
        + SetProposal(proposal *types.Proposal, peerID p2p.ID) error
        + AddProposalBlockPart(height int64, round int, part *types.Part, peerID p2p.ID) error
        + SetProposalAndBlock(proposal *types.Proposal, block *types.Block, parts *types.PartSet, peerID p2p.ID) error

    }
    interface TimeoutTicker  {
        + Start() error
        + Stop() error
        + Chan() <font color=blue>chan</font> timeoutInfo
        + ScheduleTimeout(ti timeoutInfo) 
        + SetLogger( log.Logger) 

    }
    class timeoutTicker << (S,Aquamarine) >> {
        - timer *time.Timer
        - tickChan <font color=blue>chan</font> timeoutInfo
        - tockChan <font color=blue>chan</font> timeoutInfo

        - stopTimer() 
        - timeoutRoutine() 

        + OnStart() error
        + OnStop() 
        + Chan() <font color=blue>chan</font> timeoutInfo
        + ScheduleTimeout(ti timeoutInfo) 

    }
}
"p2p.BaseReactor" *- - "consensus.Reactor"
"service.BaseService" *- - "consensus.State"
"service.BaseService" *- - "consensus.timeoutTicker"

"consensus.TimeoutTicker" <|- - "consensus.timeoutTicker"

"consensus.State" <.. "conS" "consensus.Reactor"
"consensus.timeoutTicker" <.. "timeoutTicker" "consensus.State"

namespace p2p {
    class BaseReactor << (S,Aquamarine) >> {
        + Switch *Switch

        + SetSwitch(sw *Switch)
        + GetChannels() []*conn.ChannelDescriptor
        + AddPeer(peer Peer)
        + RemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        + Receive(chID byte, peer Peer, msgBytes []byte)
        + InitPeer(peer Peer) Peer

    }
    interface IPeerSet  {
        + Has(key ID) bool
        + HasIP(ip net.IP) bool
        + Get(key ID) Peer
        + List() []Peer
        + Size() int

    }
    class MultiplexTransport << (S,Aquamarine) >> {
        - netAddr NetAddress
        - listener net.Listener
        - maxIncomingConnections int
        - acceptc <font color=blue>chan</font> accept
        - closec <font color=blue>chan</font> <font color=blue>struct</font>{}
        - conns ConnSet
        - connFilters []ConnFilterFunc
        - dialTimeout time.Duration
        - filterTimeout time.Duration
        - handshakeTimeout time.Duration
        - nodeInfo NodeInfo
        - nodeKey NodeKey
        - resolver IPResolver
        - mConfig conn.MConnConfig

        - acceptPeers()
        - cleanup(c net.Conn) error
        - filterConn(c net.Conn) error
        - upgrade(c net.Conn, dialedAddr *NetAddress) (....)
        - wrapPeer(c net.Conn, ni NodeInfo, ....) Peer

        + NetAddress() NetAddress
        + Accept(cfg peerConfig) (Peer, error)
        + Dial(addr NetAddress, cfg peerConfig) (Peer, error)
        + Close() error
        + Listen(addr NetAddress) error
        + Cleanup(p Peer)

    }
    interface Peer  {
        + FlushStop()
        + ID() ID
        + RemoteIP() net.IP
        + RemoteAddr() net.Addr
        + IsOutbound() bool
        + IsPersistent() bool
        + CloseConn() error
        + NodeInfo() NodeInfo
        + Status() conn.ConnectionStatus
        + SocketAddr() *NetAddress
        + Send( byte,  []byte) bool
        + TrySend( byte,  []byte) bool
        + Set( string,  <font color=blue>interface</font>{})
        + Get( string) <font color=blue>interface</font>{}

    }
    class PeerSet << (S,Aquamarine) >> {
        - mtx sync.Mutex
        - lookup <font color=blue>map</font>[ID]*peerSetItem
        - list []Peer

        - hasIP(peerIP net.IP) bool

        + Add(peer Peer) error
        + Has(peerKey ID) bool
        + HasIP(peerIP net.IP) bool
        + Get(peerKey ID) Peer
        + Remove(peer Peer) bool
        + Size() int
        + List() []Peer

    }
    interface Reactor  {
        + SetSwitch( *Switch)
        + GetChannels() []*conn.ChannelDescriptor
        + InitPeer(peer Peer) Peer
        + AddPeer(peer Peer)
        + RemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        + Receive(chID byte, peer Peer, msgBytes []byte)

    }
    class Switch << (S,Aquamarine) >> {
        - config *config.P2PConfig
        - reactors <font color=blue>map</font>[string]Reactor
        - chDescs []*conn.ChannelDescriptor
        - reactorsByCh <font color=blue>map</font>[byte]Reactor
        - peers *PeerSet
        - dialing *cmap.CMap
        - reconnecting *cmap.CMap
        - nodeInfo NodeInfo
        - nodeKey *NodeKey
        - addrBook AddrBook
        - persistentPeersAddrs []*NetAddress
        - unconditionalPeerIDs <font color=blue>map</font>[ID]<font color=blue>struct</font>{}
        - transport Transport
        - filterTimeout time.Duration
        - peerFilters []PeerFilterFunc
        - rng *rand.Rand
        - metrics *Metrics

        - stopAndRemovePeer(peer Peer, reason <font color=blue>interface</font>{})
        - reconnectToPeer(addr *NetAddress)
        - dialPeersAsync(netAddrs []*NetAddress)
        - randomSleep(interval time.Duration)
        - acceptRoutine()
        - addOutboundPeerWithConfig(addr *NetAddress, cfg *config.P2PConfig) error
        - filterPeer(p Peer) error
        - addPeer(p Peer) error
        - addPeerWithConnection(conn net.Conn) error

        + NetAddress() *NetAddress
        + AddReactor(name string, reactor Reactor) Reactor
        + RemoveReactor(name string, reactor Reactor)
        + Reactors() <font color=blue>map</font>[string]Reactor
        + Reactor(name string) Reactor
        + SetNodeInfo(nodeInfo NodeInfo)
        + NodeInfo() NodeInfo
        + SetNodeKey(nodeKey *NodeKey)
        + OnStart() error
        + OnStop()
        + Broadcast(chID byte, msgBytes []byte) <font color=blue>chan</font> bool
        + NumPeers() int
        + IsPeerUnconditional(id ID) bool
        + MaxNumOutboundPeers() int
        + Peers() IPeerSet
        + StopPeerForError(peer Peer, reason <font color=blue>interface</font>{})
        + StopPeerGracefully(peer Peer)
        + SetAddrBook(addrBook AddrBook)
        + MarkPeerAsGood(peer Peer)
        + DialPeersAsync(peers []string) error
        + DialPeerWithAddress(addr *NetAddress) error
        + IsDialingOrExistingAddress(addr *NetAddress) bool
        + AddPersistentPeers(addrs []string) error
        + AddUnconditionalPeerIDs(ids []string) error
        + IsPeerPersistent(na *NetAddress) bool

    }
    interface Transport  {
        + NetAddress() NetAddress
        + Accept( peerConfig) (Peer, error)
        + Dial( NetAddress,  peerConfig) (Peer, error)
        + Cleanup( Peer)

    }
    class peer << (S,Aquamarine) >> {
        - mconn *conn.MConnection
        - nodeInfo NodeInfo
        - channels []byte
        - metrics *Metrics
        - metricsTicker *time.Ticker

        + Data *cmap.CMap

        - hasChannel(chID byte) bool
        - metricsReporter()

        + String() string
        + SetLogger(l log.Logger)
        + OnStart() error
        + FlushStop()
        + OnStop()
        + ID() ID
        + IsOutbound() bool
        + IsPersistent() bool
        + NodeInfo() NodeInfo
        + SocketAddr() *NetAddress
        + Status() conn.ConnectionStatus
        + Send(chID byte, msgBytes []byte) bool
        + TrySend(chID byte, msgBytes []byte) bool
        + Get(key string) <font color=blue>interface</font>{}
        + Set(key string, data <font color=blue>interface</font>{})
        + CloseConn() error
        + RemoteAddr() net.Addr
        + CanSend(chID byte) bool

    }
    class peerConn << (S,Aquamarine) >> {
        - outbound bool
        - persistent bool
        - conn net.Conn
        - socketAddr *NetAddress
        - ip net.IP

        + ID() ID
        + RemoteIP() net.IP
        + CloseConn()

    }
    interface transportLifecycle  {
        + Close() error
        + Listen( NetAddress) error

    }
    interface ConnSet  {
        + Has( net.Conn) bool
        + HasIP( net.IP) bool
        + Set( net.Conn,  []net.IP) 
        + Remove( net.Conn) 
        + RemoveAddr( net.Addr) 

    }
    class connSet << (S,Aquamarine) >> {
        - conns <font color=blue>map</font>[string]connSetItem

        + Has(c net.Conn) bool
        + HasIP(ip net.IP) bool
        + Remove(c net.Conn) 
        + RemoveAddr(addr net.Addr) 
        + Set(c net.Conn, ips []net.IP) 

    }
    class connSetItem << (S,Aquamarine) >> {
        - conn net.Conn
        - ips []net.IP

    }
}

namespace pex {
    interface AddrBook  {
        + AddOurAddress( *p2p.NetAddress) 
        + OurAddress( *p2p.NetAddress) bool
        + AddPrivateIDs( []string) 
        + AddAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        + RemoveAddress( *p2p.NetAddress) 
        + HasAddress( *p2p.NetAddress) bool
        + NeedMoreAddrs() bool
        + Empty() bool
        + PickAddress(biasTowardsNewAddrs int) *p2p.NetAddress
        + MarkGood( p2p.ID) 
        + MarkAttempt( *p2p.NetAddress) 
        + MarkBad( *p2p.NetAddress) 
        + IsGood( *p2p.NetAddress) bool
        + GetSelection() []*p2p.NetAddress
        + GetSelectionWithBias(biasTowardsNewAddrs int) []*p2p.NetAddress
        + Size() int
        + Save() 

    }
    class Reactor << (S,Aquamarine) >> {
        - book AddrBook
        - config *ReactorConfig
        - ensurePeersPeriod time.Duration
        - requestsSent *cmap.CMap
        - lastReceivedRequests *cmap.CMap
        - seedAddrs []*p2p.NetAddress
        - attemptsToDial sync.Map
        - crawlPeerInfos <font color=blue>map</font>[p2p.ID]crawlPeerInfo

        - minReceiveRequestInterval() time.Duration
        - logErrAddrBook(err error) 
        - receiveRequest(src Peer) error
        - ensurePeersRoutine() 
        - ensurePeers() 
        - dialAttemptsInfo(addr *p2p.NetAddress) (int, time.Time)
        - dialPeer(addr *p2p.NetAddress) error
        - maxBackoffDurationForPeer(addr *p2p.NetAddress, planned time.Duration) time.Duration
        - checkSeeds() (int, []*p2p.NetAddress, error)
        - dialSeeds() 
        - crawlPeersRoutine() 
        - nodeHasSomePeersOrDialingAny() bool
        - crawlPeers(addrs []*p2p.NetAddress) 
        - cleanupCrawlPeerInfos() 
        - attemptDisconnects() 

        + OnStart() error
        + OnStop() 
        + GetChannels() []*conn.ChannelDescriptor
        + AddPeer(p Peer) 
        + RemovePeer(p Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, src Peer, msgBytes []byte) 
        + RequestAddrs(p Peer) 
        + ReceiveAddrs(addrs []*p2p.NetAddress, src Peer) error
        + SendAddrs(p Peer, netAddrs []*p2p.NetAddress) 
        + SetEnsurePeersPeriod(d time.Duration) 
        + AttemptsToDial(addr *p2p.NetAddress) int

    }
    class addrBook << (S,Aquamarine) >> {
        - mtx sync.Mutex
        - rand *rand.Rand
        - ourAddrs <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - privateIDs <font color=blue>map</font>[p2p.ID]<font color=blue>struct</font>{}
        - addrLookup <font color=blue>map</font>[p2p.ID]*knownAddress
        - bucketsOld []<font color=blue>map</font>[string]*knownAddress
        - bucketsNew []<font color=blue>map</font>[string]*knownAddress
        - nOld int
        - nNew int
        - filePath string
        - key string
        - routabilityStrict bool
        - wg sync.WaitGroup

        - init() 
        - size() int
        - saveRoutine() 
        - getBucket(bucketType byte, bucketIdx int) <font color=blue>map</font>[string]*knownAddress
        - addToNewBucket(ka *knownAddress, bucketIdx int) 
        - addToOldBucket(ka *knownAddress, bucketIdx int) bool
        - removeFromBucket(ka *knownAddress, bucketType byte, bucketIdx int) 
        - removeFromAllBuckets(ka *knownAddress) 
        - pickOldest(bucketType byte, bucketIdx int) *knownAddress
        - addAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        - randomPickAddresses(bucketType byte, num int) []*p2p.NetAddress
        - expireNew(bucketIdx int) 
        - moveToOld(ka *knownAddress) 
        - calcNewBucket(addr *p2p.NetAddress, src *p2p.NetAddress) int
        - calcOldBucket(addr *p2p.NetAddress) int
        - groupKey(na *p2p.NetAddress) string
        - saveToFile(filePath string) 
        - loadFromFile(filePath string) bool

        + OnStart() error
        + OnStop() 
        + Wait() 
        + FilePath() string
        + AddOurAddress(addr *p2p.NetAddress) 
        + OurAddress(addr *p2p.NetAddress) bool
        + AddPrivateIDs(ids []string) 
        + AddAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error
        + RemoveAddress(addr *p2p.NetAddress) 
        + IsGood(addr *p2p.NetAddress) bool
        + HasAddress(addr *p2p.NetAddress) bool
        + NeedMoreAddrs() bool
        + Empty() bool
        + PickAddress(biasTowardsNewAddrs int) *p2p.NetAddress
        + MarkGood(id p2p.ID) 
        + MarkAttempt(addr *p2p.NetAddress) 
        + MarkBad(addr *p2p.NetAddress) 
        + GetSelection() []*p2p.NetAddress
        + GetSelectionWithBias(biasTowardsNewAddrs int) []*p2p.NetAddress
        + Size() int
        + Save() 

    }
}


"p2p.BaseReactor" *- - "pex.Reactor"
"service.BaseService" *- - "pex.addrBook"

"pex.AddrBook" <|- - "pex.addrBook"
"pex.addrBook" <.. "book" "pex.Reactor"

namespace service {
    class BaseService << (S,Aquamarine) >> {
        - name string
        - started uint32
        - stopped uint32
        - quit <font color=blue>chan</font> <font color=blue>struct</font>{}
        - impl Service

        + Logger log.Logger

        + SetLogger(l log.Logger)
        + Start() error
        + OnStart() error
        + Stop() error
        + OnStop()
        + Reset() error
        + OnReset() error
        + IsRunning() bool
        + Wait()
        + String() string
        + Quit() <font color=blue>chan</font> <font color=blue>struct</font>{}

    }
    interface Service  {
        + Start() error
        + OnStart() error
        + Stop() error
        + OnStop()
        + Reset() error
        + OnReset() error
        + IsRunning() bool
        + Quit() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + String() string
        + SetLogger( log.Logger)

    }
}

"service.Service" <|- - "service.BaseService"
"service.BaseService" *- - "p2p.BaseReactor"
"p2p.Reactor" <|- "p2p.BaseReactor"

"p2p.peerConn" *- - "p2p.peer"
"service.BaseService" *- - "p2p.peer"


"p2p.Transport" <|- - "p2p.MultiplexTransport"
"p2p.transportLifecycle" <|- - "p2p.MultiplexTransport"
"p2p.IPeerSet" <|- - "p2p.PeerSet"

"p2p.Peer" <|- - "p2p.peer"

"service.BaseService" *- - "p2p.Switch"
"p2p.BaseReactor" <.down. "reactors" "p2p.Switch"
"p2p.PeerSet" <.. "peers" "p2p.Switch"
"p2p.MultiplexTransport" <. "transport" "p2p.Switch"

 "p2p.Switch" <.. "Switch" "p2p.BaseReactor"

"p2p.peer" <.. "list" "p2p.PeerSet"

namespace blockchain {
    class BlockPool << (S,Aquamarine) >> {
        - startTime time.Time
        - mtx sync.Mutex
        - requesters <font color=blue>map</font>[int64]*bpRequester
        - height int64
        - peers <font color=blue>map</font>[p2p.ID]*bpPeer
        - maxPeerHeight int64
        - numPending int32
        - requestsCh <font color=blue>chan</font> BlockRequest
        - errorsCh <font color=blue>chan</font> peerError

        - makeRequestersRoutine()
        - removeTimedoutPeers()
        - removePeer(peerID p2p.ID)
        - updateMaxPeerHeight()
        - pickIncrAvailablePeer(minHeight int64) *bpPeer
        - makeNextRequester()
        - requestersLen() int64
        - sendRequest(height int64, peerID p2p.ID)
        - sendError(err error, peerID p2p.ID)
        - debug() string

        + OnStart() error
        + GetStatus() (int64, int32, int)
        + IsCaughtUp() bool
        + PeekTwoBlocks() (*types.Block, *types.Block)
        + PopRequest()
        + RedoRequest(height int64) p2p.ID
        + AddBlock(peerID p2p.ID, block *types.Block, blockSize int)
        + MaxPeerHeight() int64
        + SetPeerHeight(peerID p2p.ID, height int64)
        + RemovePeer(peerID p2p.ID)

    }
    class BlockchainReactor << (S,Aquamarine) >> {
        - initialState state.State
        - blockExec *state.BlockExecutor
        - store *store.BlockStore
        - pool *BlockPool
        - fastSync bool
        - requestsCh <font color=blue>chan</font> BlockRequest
        - errorsCh <font color=blue>chan</font> peerError

        - respondToPeer(msg *bcBlockRequestMessage, src p2p.Peer) bool
        - poolRoutine()

        + SetLogger(l log.Logger)
        + OnStart() error
        + OnStop()
        + GetChannels() []*p2p.ChannelDescriptor
        + AddPeer(peer p2p.Peer)
        + RemovePeer(peer p2p.Peer, reason <font color=blue>interface</font>{})
        + Receive(chID byte, src p2p.Peer, msgBytes []byte)
        + BroadcastStatusRequest() error

    }
        class bpRequester << (S,Aquamarine) >> {
        - pool *BlockPool
        - height int64
        - gotBlockCh <font color=blue>chan</font> <font color=blue>struct</font>{}
        - redoCh <font color=blue>chan</font> p2p.ID
        - mtx sync.Mutex
        - peerID p2p.ID
        - block *types.Block

        - setBlock(block *types.Block, peerID p2p.ID) bool
        - getBlock() *types.Block
        - getPeerID() p2p.ID
        - reset()
        - redo(peerID p2p.ID)
        - requestRoutine()

        + OnStart() error

    }
}
"service.BaseService" *- - "blockchain.BlockPool"
"p2p.BaseReactor" *- - "blockchain.BlockchainReactor"
"service.BaseService" *- - "blockchain.bpRequester"

"blockchain.BlockPool" <..  "pool" "blockchain.BlockchainReactor"
"blockchain.bpRequester" <.. "requesters" "blockchain.BlockPool"

namespace conn {
    class Channel << (S,Aquamarine) >> {
        - conn *MConnection
        - desc ChannelDescriptor
        - sendQueue <font color=blue>chan</font> []byte
        - sendQueueSize int32
        - recving []byte
        - sending []byte
        - recentlySent int64
        - maxPacketMsgPayloadSize int

        + Logger log.Logger

        - sendBytes(bytes []byte) bool
        - trySendBytes(bytes []byte) bool
        - loadSendQueueSize() int
        - canSend() bool
        - isSendPending() bool
        - nextPacketMsg() PacketMsg
        - writePacketMsgTo(w io.Writer) (int64, error)
        - recvPacketMsg(packet PacketMsg) ([]byte, error)
        - updateStats()

        + SetLogger(l log.Logger)

    }
    class ChannelDescriptor << (S,Aquamarine) >> {
        + ID byte
        + Priority int
        + SendQueueCapacity int
        + RecvBufferCapacity int
        + RecvMessageCapacity int

        + FillDefaults() ChannelDescriptor

    }
    class MConnection << (S,Aquamarine) >> {
        - conn net.Conn
        - bufConnReader *bufio.Reader
        - bufConnWriter *bufio.Writer
        - sendMonitor *flowrate.Monitor
        - recvMonitor *flowrate.Monitor
        - send <font color=blue>chan</font> <font color=blue>struct</font>{}
        - pong <font color=blue>chan</font> <font color=blue>struct</font>{}
        - channels []*Channel
        - channelsIdx <font color=blue>map</font>[byte]*Channel
        - onReceive receiveCbFunc
        - onError errorCbFunc
        - errored uint32
        - config MConnConfig
        - quitSendRoutine <font color=blue>chan</font> <font color=blue>struct</font>{}
        - doneSendRoutine <font color=blue>chan</font> <font color=blue>struct</font>{}
        - quitRecvRoutine <font color=blue>chan</font> <font color=blue>struct</font>{}
        - stopMtx sync.Mutex
        - flushTimer *timer.ThrottleTimer
        - pingTimer *time.Ticker
        - pongTimer *time.Timer
        - pongTimeoutCh <font color=blue>chan</font> bool
        - chStatsTimer *time.Ticker
        - created time.Time

        + _maxPacketMsgSize int

        - stopServices() bool
        - flush()
        - stopForError(r <font color=blue>interface</font>{})
        - sendRoutine()
        - sendSomePacketMsgs() bool
        - sendPacketMsg() bool
        - recvRoutine()
        - stopPongTimer()
        - maxPacketMsgSize() int

        + SetLogger(l log.Logger)
        + OnStart() error
        + FlushStop()
        + OnStop()
        + String() string
        + _recover()
        + Send(chID byte, msgBytes []byte) bool
        + TrySend(chID byte, msgBytes []byte) bool
        + CanSend(chID byte) bool
        + Status() ConnectionStatus

    }
}
"service.BaseService" *- - "conn.MConnection"
"conn.MConnection" <.. "mconn" "p2p.peer"
"conn.Channel" <.. "channels" "conn.MConnection"
"conn.ChannelDescriptor" <.. "desc" "conn.Channel"

"net.Conn" <.. "conn"  "conn.MConnection"
"net.Conn" <.. "conn" "conn.Channel"


"net.Conn" <.. "conn" "p2p.connSetItem"
"p2p.connSetItem" <.. "conn" "p2p.connSet"
"p2p.connSet" <.. "conns" "p2p.MultiplexTransport"
"p2p.ConnSet" <|- - "p2p.connSet"
"net.Conn" <.. "conn" "p2p.peerConn"


hide methods
hide members

@enduml

PlantUML version 1.2019.13(Wed Dec 11 01:18:29 CST 2019)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 13.0.1+9
Operating System: Mac OS X
Default Encoding: UTF-8
Language: en
Country: CN
--></g></svg>