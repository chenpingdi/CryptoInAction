@startuml
namespace p2p {
    class BaseReactor << (S,Aquamarine) >> {
        + Switch *Switch

    }
    interface IPeerSet  {
        + Has(key ID) bool
        + HasIP(ip net.IP) bool
        + Get(key ID) Peer
        + List() []Peer
        + Size() int

    }
    class MultiplexTransport << (S,Aquamarine) >> {
        - netAddr NetAddress
        - listener net.Listener
        - maxIncomingConnections int
        - acceptc <font color=blue>chan</font> accept
        - closec <font color=blue>chan</font> <font color=blue>struct</font>{}
        - conns ConnSet
        - connFilters []ConnFilterFunc
        - dialTimeout time.Duration
        - filterTimeout time.Duration
        - handshakeTimeout time.Duration
        - nodeInfo NodeInfo
        - nodeKey NodeKey
        - resolver IPResolver
        - mConfig conn.MConnConfig
 
    }
    interface Peer  {
        + FlushStop() 
        + ID() ID
        + RemoteIP() net.IP
        + RemoteAddr() net.Addr
        + IsOutbound() bool
        + IsPersistent() bool
        + CloseConn() error
        + NodeInfo() NodeInfo
        + Status() conn.ConnectionStatus
        + SocketAddr() *NetAddress
        + Send( byte,  []byte) bool
        + TrySend( byte,  []byte) bool
        + Set( string,  <font color=blue>interface</font>{}) 
        + Get( string) <font color=blue>interface</font>{}

    }
    class PeerSet << (S,Aquamarine) >> {
        - mtx sync.Mutex
        - lookup <font color=blue>map</font>[ID]*peerSetItem
        - list []Peer

        - hasIP(peerIP net.IP) bool

    }
    interface Reactor  {
        + SetSwitch( *Switch) 
        + GetChannels() []*conn.ChannelDescriptor
        + InitPeer(peer Peer) Peer
        + AddPeer(peer Peer) 
        + RemovePeer(peer Peer, reason <font color=blue>interface</font>{}) 
        + Receive(chID byte, peer Peer, msgBytes []byte) 

    }
    class Switch << (S,Aquamarine) >> {
        - config *config.P2PConfig
        - reactors <font color=blue>map</font>[string]Reactor
        - chDescs []*conn.ChannelDescriptor
        - reactorsByCh <font color=blue>map</font>[byte]Reactor
        - peers *PeerSet
        - dialing *cmap.CMap
        - reconnecting *cmap.CMap
        - nodeInfo NodeInfo
        - nodeKey *NodeKey
        - addrBook AddrBook
        - persistentPeersAddrs []*NetAddress
        - unconditionalPeerIDs <font color=blue>map</font>[ID]<font color=blue>struct</font>{}
        - transport Transport
        - filterTimeout time.Duration
        - peerFilters []PeerFilterFunc
        - rng *rand.Rand
        - metrics *Metrics

    }
    interface Transport  {
        + NetAddress() NetAddress
        + Accept( peerConfig) (Peer, error)
        + Dial( NetAddress,  peerConfig) (Peer, error)
        + Cleanup( Peer) 

    }
    class peer << (S,Aquamarine) >> {
        - mconn *conn.MConnection
        - nodeInfo NodeInfo
        - channels []byte
        - metrics *Metrics
        - metricsTicker *time.Ticker

        + Data *cmap.CMap

    }
    class peerConn << (S,Aquamarine) >> {
        - outbound bool
        - persistent bool
        - conn net.Conn
        - socketAddr *NetAddress
        - ip net.IP

        + ID() ID
        + RemoteIP() net.IP
        + CloseConn() 

    }
    interface transportLifecycle  {
        + Close() error
        + Listen( NetAddress) error

    }
}

namespace service {
    class BaseService << (S,Aquamarine) >> {
        - name string
        - started uint32
        - stopped uint32
        - quit <font color=blue>chan</font> <font color=blue>struct</font>{}
        - impl Service

        + Logger log.Logger
        
    }
    interface Service  {
        + Start() error
        + OnStart() error
        + Stop() error
        + OnStop() 
        + Reset() error
        + OnReset() error
        + IsRunning() bool
        + Quit() <font color=blue>chan</font> <font color=blue>struct</font>{}
        + String() string
        + SetLogger( log.Logger) 

    }
}

"service.Service" <|-- "service.BaseService"

"service.BaseService" *-- "p2p.BaseReactor"
"p2p.Reactor" <|-left "p2p.BaseReactor"

"p2p.peerConn" *-- "p2p.peer"
"service.BaseService" *-- "p2p.peer"


"p2p.Transport" <|-- "p2p.MultiplexTransport"
"p2p.transportLifecycle" <|-- "p2p.MultiplexTransport"
"p2p.IPeerSet" <|-- "p2p.PeerSet"

"p2p.Peer" <|-- "p2p.peer"

"service.BaseService" *-up- "p2p.Switch"
"p2p.BaseReactor" <.down. "reactors" "p2p.Switch"
"p2p.PeerSet" <.right "peers" "p2p.Switch"
"p2p.MultiplexTransport" <.left "transport" "p2p.Switch"
 "p2p.Switch" <.. "Switch" "p2p.BaseReactor"

"p2p.peer" <.right "list" "p2p.PeerSet"


@enduml
