深入理解Ed25519: 原理与速度
longcpp
2019-09-30

Edwards-curve Digital Signature Algorithm (EdDSA) 是定义在(扭曲)爱德华曲线上的Schnorr 签名的变种签名机制. Ed25519是Bernstein等人在2011年基于与蒙哥马利曲线Curve25519双向有理等价的扭曲爱德华曲线Edwards25519 构建的EdDSA签名机制. Ed25519签名机制的显著特点是安全高效, 设计者们宣称在128比特安全强度条件下Ed25519签名机制可达到10万/秒的签名速度和7万/秒的验签速度.

2015年Bernstein等人在论文”EdDSA for more curves”中进一步推广了EdDSA签名机制,以使得EdDSA签名机制可适用于更多的椭圆曲线. NSA在NIST密码学安全的随机数随机数发生器Dual_EC_DRBG标准中埋藏的算法级后门的公开促使人们更倾向于选择设计机制完全透明的Curve25519曲线. 又由于EdDSA签名机制提供的诸多良好特性, 使得Ed25519签名机制备受欢迎, 因此有了RFC 8032以RFC的形式进一步明确了EdDSA签名规范,并基于Edwards25519曲线(128比特安全强度)和Ed448-Goldilocks曲线(224比特安全强度) 给出了5种实例化的EdDSA签名机制: Ed25519, Ed25519ctx, Ed25519ph, Ed448以及Ed448ph.

根据RFC 8032中的说明, EdDSA签名机制有两种版本PureEdDSA和HashEdDSA, 其中PureEdDSA直接对待签名消息计算签名值(而非我们熟知的对消息的哈希值计算签名值), 而HashEdDSA遵循我们熟悉的模式先对待签名消息进行哈希运算然后对哈希值进行签名. 也因此HashEdDSA在出现哈希碰撞的情况下无法保证签名机制的安全性, 而哈希碰撞不会影响PureEdDSA签名机制的安全性. 

重点关注基于Edwards25519实例化的EdDSA签名机制: Ed25519, Ed25519ctx以及Ed25519ph. Ed25519和Ed25519ctx可以看作是PureEdDSA的实例化, Ed25519ph可以看做HashEdDSA的实例化. 三个变种签名算法内部都采用SHA-512算法.区别在于Ed25519ph是对消息的SHA-512哈希值计算签名值, 而Ed25519, Ed25519ctx直接对消息计算签名值. Ed25519和Ed25519ctx的主要区别在于Ed25519ctx可以额外包含一个上下文环境参数(Ed25519ph也可以包含上下文环境参数) context, 这个参数可以用来对签名机制在不同场景下的应用进行区分, 以防止签名机制在不同用途之间的混用,简化协议的设计.

在学术论文宣称的速度指标与工业界广泛部署的函数库的速度指标通常存在差异. 在介绍基本原理之外我们还考察广泛使用的几个密码学库中Ed25519签名机制的实现效率,包括C语言库libsodium, OpenSSL, Go语言密码库以及Rust语言库ed25519-dalek. 测试结果显示libsodium, OpenSSL以及Go语言密码库中的Ed25519验签速度相比libsecp256k1中优化选项全开的ECDSA验签速度较慢. 而ed25519-dalek中Ed25519的实现速度喜人, 在打开AVX2选项时可达到47000 sign/s及27200 verify/s.考虑批量验证时, 例如批量验证256个签名值时,则可以到每秒验证64800个签名的效果. 高速的验签速度在区块链场景中至关重要,也因此笔者认为后续的区块链项目中会更倾向于采纳EdDSA签名机制, 已有的项目案例包括比原链, Monero, Zcash, Cosmos以及Polkadot.

EdDSA签名机制本身的设计已经尽可能防止使用中的差错, 然而在区块链项目中部署EdDSA签名机制还是面临诸多挑战. 这一方面是由于扭曲爱德华曲线中点群的余因子通常不为1可能带来的在区块链系统中的安全隐患,另一方面则是由于私钥取值不连续带来的与HD钱包整合时的困难. 本次我们关注EdDSA签名机制的原理以及Ed25519的实测速度, 更多详情请戳[阅读原文].

原文链接: https://github.com/longcpp/CryptoInAction/blob/master/intro-ed25519/190930-ed25519-theory-speed.pdf
